// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Room.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* CHMMJCreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHMMJCreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* SHMMJCreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SHMMJCreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHMMJEnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHMMJEnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* SHMMJEnterRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SHMMJEnterRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* SComein_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SComein_reflection_ = NULL;
const ::google::protobuf::Descriptor* CBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* SReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* SLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDissolveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDissolveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* SDissolveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDissolveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* SVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* SVoteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SVoteResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRChat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Room_2eproto() {
  protobuf_AddDesc_Room_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Room.proto");
  GOOGLE_CHECK(file != NULL);
  CHMMJCreateRoom_descriptor_ = file->message_type(0);
  static const int CHMMJCreateRoom_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, ante_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, bao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, bang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, uid_),
  };
  CHMMJCreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHMMJCreateRoom_descriptor_,
      CHMMJCreateRoom::default_instance_,
      CHMMJCreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJCreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHMMJCreateRoom));
  SHMMJCreateRoom_descriptor_ = file->message_type(1);
  static const int SHMMJCreateRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJCreateRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJCreateRoom, roomdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJCreateRoom, roomuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJCreateRoom, err_),
  };
  SHMMJCreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SHMMJCreateRoom_descriptor_,
      SHMMJCreateRoom::default_instance_,
      SHMMJCreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJCreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJCreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SHMMJCreateRoom));
  CHMMJEnterRoom_descriptor_ = file->message_type(2);
  static const int CHMMJEnterRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJEnterRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJEnterRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJEnterRoom, rtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJEnterRoom, uid_),
  };
  CHMMJEnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHMMJEnterRoom_descriptor_,
      CHMMJEnterRoom::default_instance_,
      CHMMJEnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJEnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHMMJEnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHMMJEnterRoom));
  SHMMJEnterRoom_descriptor_ = file->message_type(3);
  static const int SHMMJEnterRoom_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, roomdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, roomusers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, sv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, err_),
  };
  SHMMJEnterRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SHMMJEnterRoom_descriptor_,
      SHMMJEnterRoom::default_instance_,
      SHMMJEnterRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHMMJEnterRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SHMMJEnterRoom));
  SComein_descriptor_ = file->message_type(4);
  static const int SComein_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SComein, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SComein, roomuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SComein, uid_),
  };
  SComein_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SComein_descriptor_,
      SComein::default_instance_,
      SComein_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SComein, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SComein, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SComein));
  CBegin_descriptor_ = file->message_type(5);
  static const int CBegin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBegin, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBegin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBegin, uid_),
  };
  CBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CBegin_descriptor_,
      CBegin::default_instance_,
      CBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CBegin));
  SBegin_descriptor_ = file->message_type(6);
  static const int SBegin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBegin, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBegin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBegin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBegin, err_),
  };
  SBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SBegin_descriptor_,
      SBegin::default_instance_,
      SBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SBegin));
  CReady_descriptor_ = file->message_type(7);
  static const int CReady_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReady, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReady, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReady, uid_),
  };
  CReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CReady_descriptor_,
      CReady::default_instance_,
      CReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CReady));
  SReady_descriptor_ = file->message_type(8);
  static const int SReady_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, err_),
  };
  SReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SReady_descriptor_,
      SReady::default_instance_,
      SReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SReady));
  CLeave_descriptor_ = file->message_type(9);
  static const int CLeave_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLeave, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLeave, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLeave, zhudong_),
  };
  CLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLeave_descriptor_,
      CLeave::default_instance_,
      CLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLeave));
  SLeave_descriptor_ = file->message_type(10);
  static const int SLeave_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLeave, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLeave, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLeave, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLeave, err_),
  };
  SLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLeave_descriptor_,
      SLeave::default_instance_,
      SLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLeave));
  CLine_descriptor_ = file->message_type(11);
  static const int CLine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLine, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLine, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLine, uid_),
  };
  CLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLine_descriptor_,
      CLine::default_instance_,
      CLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLine));
  SLine_descriptor_ = file->message_type(12);
  static const int SLine_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, err_),
  };
  SLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLine_descriptor_,
      SLine::default_instance_,
      SLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLine));
  CDissolveRoom_descriptor_ = file->message_type(13);
  static const int CDissolveRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDissolveRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDissolveRoom, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDissolveRoom, uid_),
  };
  CDissolveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDissolveRoom_descriptor_,
      CDissolveRoom::default_instance_,
      CDissolveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDissolveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDissolveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDissolveRoom));
  SDissolveRoom_descriptor_ = file->message_type(14);
  static const int SDissolveRoom_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, err_),
  };
  SDissolveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SDissolveRoom_descriptor_,
      SDissolveRoom::default_instance_,
      SDissolveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDissolveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SDissolveRoom));
  CVote_descriptor_ = file->message_type(15);
  static const int CVote_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVote, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVote, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVote, uid_),
  };
  CVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CVote_descriptor_,
      CVote::default_instance_,
      CVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CVote));
  SVote_descriptor_ = file->message_type(16);
  static const int SVote_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVote, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVote, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVote, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVote, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVote, suid_),
  };
  SVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SVote_descriptor_,
      SVote::default_instance_,
      SVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SVote));
  SVoteResult_descriptor_ = file->message_type(17);
  static const int SVoteResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVoteResult, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVoteResult, dissolve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVoteResult, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVoteResult, suid_),
  };
  SVoteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SVoteResult_descriptor_,
      SVoteResult::default_instance_,
      SVoteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVoteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SVoteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SVoteResult));
  CRChat_descriptor_ = file->message_type(18);
  static const int CRChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRChat, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRChat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRChat, uid_),
  };
  CRChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRChat_descriptor_,
      CRChat::default_instance_,
      CRChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRChat));
  SRChat_descriptor_ = file->message_type(19);
  static const int SRChat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRChat, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRChat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRChat, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRChat, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRChat, suid_),
  };
  SRChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRChat_descriptor_,
      SRChat::default_instance_,
      SRChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRChat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Room_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHMMJCreateRoom_descriptor_, &CHMMJCreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SHMMJCreateRoom_descriptor_, &SHMMJCreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHMMJEnterRoom_descriptor_, &CHMMJEnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SHMMJEnterRoom_descriptor_, &SHMMJEnterRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SComein_descriptor_, &SComein::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CBegin_descriptor_, &CBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SBegin_descriptor_, &SBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CReady_descriptor_, &CReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SReady_descriptor_, &SReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLeave_descriptor_, &CLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLeave_descriptor_, &SLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLine_descriptor_, &CLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLine_descriptor_, &SLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDissolveRoom_descriptor_, &CDissolveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SDissolveRoom_descriptor_, &SDissolveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CVote_descriptor_, &CVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SVote_descriptor_, &SVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SVoteResult_descriptor_, &SVoteResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRChat_descriptor_, &CRChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRChat_descriptor_, &SRChat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Room_2eproto() {
  delete CHMMJCreateRoom::default_instance_;
  delete CHMMJCreateRoom_reflection_;
  delete SHMMJCreateRoom::default_instance_;
  delete SHMMJCreateRoom_reflection_;
  delete CHMMJEnterRoom::default_instance_;
  delete CHMMJEnterRoom_reflection_;
  delete SHMMJEnterRoom::default_instance_;
  delete SHMMJEnterRoom_reflection_;
  delete SComein::default_instance_;
  delete SComein_reflection_;
  delete CBegin::default_instance_;
  delete CBegin_reflection_;
  delete SBegin::default_instance_;
  delete SBegin_reflection_;
  delete CReady::default_instance_;
  delete CReady_reflection_;
  delete SReady::default_instance_;
  delete SReady_reflection_;
  delete CLeave::default_instance_;
  delete CLeave_reflection_;
  delete SLeave::default_instance_;
  delete SLeave_reflection_;
  delete CLine::default_instance_;
  delete CLine_reflection_;
  delete SLine::default_instance_;
  delete SLine_reflection_;
  delete CDissolveRoom::default_instance_;
  delete CDissolveRoom_reflection_;
  delete SDissolveRoom::default_instance_;
  delete SDissolveRoom_reflection_;
  delete CVote::default_instance_;
  delete CVote_reflection_;
  delete SVote::default_instance_;
  delete SVote_reflection_;
  delete SVoteResult::default_instance_;
  delete SVoteResult_reflection_;
  delete CRChat::default_instance_;
  delete CRChat_reflection_;
  delete SRChat::default_instance_;
  delete SRChat_reflection_;
}

void protobuf_AddDesc_Room_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_Vo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nRoom.proto\022\010protocol\032\010Vo.proto\"x\n\017CHMM"
    "JCreateRoom\022\022\n\003cmd\030\001 \001(\r:\00528672\022\014\n\004type\030"
    "\002 \001(\r\022\014\n\004ante\030\003 \001(\r\022\r\n\005round\030\004 \001(\r\022\013\n\003ba"
    "o\030\005 \001(\r\022\014\n\004bang\030\006 \001(\r\022\013\n\003uid\030\007 \001(\t\"~\n\017SH"
    "MMJCreateRoom\022\022\n\003cmd\030\001 \001(\r:\00528672\022$\n\010roo"
    "mdata\030\002 \001(\0132\022.protocol.RoomData\022$\n\010roomu"
    "ser\030\003 \001(\0132\022.protocol.RoomUser\022\013\n\003err\030\004 \001"
    "(\r\"P\n\016CHMMJEnterRoom\022\022\n\003cmd\030\001 \001(\r:\00528673"
    "\022\016\n\006roomid\030\002 \001(\t\022\r\n\005rtype\030\003 \001(\r\022\013\n\003uid\030\004"
    " \001(\t\"\250\001\n\016SHMMJEnterRoom\022\022\n\003cmd\030\001 \001(\r:\00528"
    "673\022$\n\010roomdata\030\002 \001(\0132\022.protocol.RoomDat"
    "a\022%\n\troomusers\030\003 \003(\0132\022.protocol.RoomUser"
    "\022\033\n\002sv\030\004 \003(\0132\017.protocol.SVote\022\013\n\003uid\030\005 \001"
    "(\t\022\013\n\003err\030\006 \001(\r\"P\n\007SComein\022\022\n\003cmd\030\001 \001(\r:"
    "\00528674\022$\n\010roomuser\030\002 \001(\0132\022.protocol.Room"
    "User\022\013\n\003uid\030\003 \001(\t\"7\n\006CBegin\022\022\n\003cmd\030\001 \001(\r"
    ":\00528675\022\014\n\004type\030\002 \001(\r\022\013\n\003uid\030\003 \001(\t\"D\n\006SB"
    "egin\022\022\n\003cmd\030\001 \001(\r:\00528675\022\014\n\004type\030\002 \001(\r\022\013"
    "\n\003uid\030\003 \001(\t\022\013\n\003err\030\004 \001(\r\"8\n\006CReady\022\022\n\003cm"
    "d\030\001 \001(\r:\00528676\022\r\n\005ready\030\002 \001(\010\022\013\n\003uid\030\003 \001"
    "(\t\"e\n\006SReady\022\022\n\003cmd\030\001 \001(\r:\00528676\022\r\n\005read"
    "y\030\002 \001(\010\022\020\n\010position\030\003 \001(\r\022\013\n\003uid\030\004 \001(\t\022\014"
    "\n\004suid\030\005 \001(\t\022\013\n\003err\030\006 \001(\r\":\n\006CLeave\022\022\n\003c"
    "md\030\001 \001(\r:\00528677\022\013\n\003uid\030\002 \001(\t\022\017\n\007zhudong\030"
    "\003 \001(\010\"D\n\006SLeave\022\022\n\003cmd\030\001 \001(\r:\00528677\022\013\n\003u"
    "id\030\002 \001(\t\022\014\n\004suid\030\003 \001(\t\022\013\n\003err\030\004 \001(\r\"8\n\005C"
    "Line\022\022\n\003cmd\030\001 \001(\r:\00528678\022\016\n\006online\030\002 \001(\010"
    "\022\013\n\003uid\030\003 \001(\t\"e\n\005SLine\022\022\n\003cmd\030\001 \001(\r:\005286"
    "78\022\016\n\006online\030\002 \001(\010\022\020\n\010position\030\003 \001(\r\022\013\n\003"
    "uid\030\004 \001(\t\022\014\n\004suid\030\005 \001(\t\022\013\n\003err\030\006 \001(\r\"=\n\r"
    "CDissolveRoom\022\022\n\003cmd\030\001 \001(\r:\00528679\022\013\n\003rid"
    "\030\002 \001(\t\022\013\n\003uid\030\003 \001(\t\"x\n\rSDissolveRoom\022\022\n\003"
    "cmd\030\001 \001(\r:\00528679\022\013\n\003rid\030\002 \001(\t\022\014\n\004time\030\003 "
    "\001(\r\022\020\n\010position\030\004 \001(\r\022\013\n\003uid\030\005 \001(\t\022\014\n\004su"
    "id\030\006 \001(\t\022\013\n\003err\030\007 \001(\r\"7\n\005CVote\022\022\n\003cmd\030\001 "
    "\001(\r:\00528680\022\r\n\005agree\030\002 \001(\010\022\013\n\003uid\030\003 \001(\t\"W"
    "\n\005SVote\022\022\n\003cmd\030\001 \001(\r:\00528680\022\r\n\005agree\030\002 \001"
    "(\010\022\020\n\010position\030\003 \001(\r\022\013\n\003uid\030\004 \001(\t\022\014\n\004sui"
    "d\030\005 \001(\t\"N\n\013SVoteResult\022\022\n\003cmd\030\001 \001(\r:\005286"
    "81\022\020\n\010dissolve\030\002 \001(\010\022\013\n\003uid\030\003 \001(\t\022\014\n\004sui"
    "d\030\005 \001(\t\":\n\006CRChat\022\022\n\003cmd\030\001 \001(\r:\00528682\022\017\n"
    "\007content\030\002 \001(\t\022\013\n\003uid\030\003 \001(\t\"U\n\006SRChat\022\022\n"
    "\003cmd\030\001 \001(\r:\00528682\022\017\n\007content\030\002 \001(\t\022\013\n\003ui"
    "d\030\003 \001(\t\022\013\n\003pos\030\004 \001(\r\022\014\n\004suid\030\005 \001(\t", 1754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Room.proto", &protobuf_RegisterTypes);
  CHMMJCreateRoom::default_instance_ = new CHMMJCreateRoom();
  SHMMJCreateRoom::default_instance_ = new SHMMJCreateRoom();
  CHMMJEnterRoom::default_instance_ = new CHMMJEnterRoom();
  SHMMJEnterRoom::default_instance_ = new SHMMJEnterRoom();
  SComein::default_instance_ = new SComein();
  CBegin::default_instance_ = new CBegin();
  SBegin::default_instance_ = new SBegin();
  CReady::default_instance_ = new CReady();
  SReady::default_instance_ = new SReady();
  CLeave::default_instance_ = new CLeave();
  SLeave::default_instance_ = new SLeave();
  CLine::default_instance_ = new CLine();
  SLine::default_instance_ = new SLine();
  CDissolveRoom::default_instance_ = new CDissolveRoom();
  SDissolveRoom::default_instance_ = new SDissolveRoom();
  CVote::default_instance_ = new CVote();
  SVote::default_instance_ = new SVote();
  SVoteResult::default_instance_ = new SVoteResult();
  CRChat::default_instance_ = new CRChat();
  SRChat::default_instance_ = new SRChat();
  CHMMJCreateRoom::default_instance_->InitAsDefaultInstance();
  SHMMJCreateRoom::default_instance_->InitAsDefaultInstance();
  CHMMJEnterRoom::default_instance_->InitAsDefaultInstance();
  SHMMJEnterRoom::default_instance_->InitAsDefaultInstance();
  SComein::default_instance_->InitAsDefaultInstance();
  CBegin::default_instance_->InitAsDefaultInstance();
  SBegin::default_instance_->InitAsDefaultInstance();
  CReady::default_instance_->InitAsDefaultInstance();
  SReady::default_instance_->InitAsDefaultInstance();
  CLeave::default_instance_->InitAsDefaultInstance();
  SLeave::default_instance_->InitAsDefaultInstance();
  CLine::default_instance_->InitAsDefaultInstance();
  SLine::default_instance_->InitAsDefaultInstance();
  CDissolveRoom::default_instance_->InitAsDefaultInstance();
  SDissolveRoom::default_instance_->InitAsDefaultInstance();
  CVote::default_instance_->InitAsDefaultInstance();
  SVote::default_instance_->InitAsDefaultInstance();
  SVoteResult::default_instance_->InitAsDefaultInstance();
  CRChat::default_instance_->InitAsDefaultInstance();
  SRChat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Room_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Room_2eproto {
  StaticDescriptorInitializer_Room_2eproto() {
    protobuf_AddDesc_Room_2eproto();
  }
} static_descriptor_initializer_Room_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CHMMJCreateRoom::kCmdFieldNumber;
const int CHMMJCreateRoom::kTypeFieldNumber;
const int CHMMJCreateRoom::kAnteFieldNumber;
const int CHMMJCreateRoom::kRoundFieldNumber;
const int CHMMJCreateRoom::kBaoFieldNumber;
const int CHMMJCreateRoom::kBangFieldNumber;
const int CHMMJCreateRoom::kUidFieldNumber;
#endif  // !_MSC_VER

CHMMJCreateRoom::CHMMJCreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHMMJCreateRoom::InitAsDefaultInstance() {
}

CHMMJCreateRoom::CHMMJCreateRoom(const CHMMJCreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHMMJCreateRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28672u;
  type_ = 0u;
  ante_ = 0u;
  round_ = 0u;
  bao_ = 0u;
  bang_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHMMJCreateRoom::~CHMMJCreateRoom() {
  SharedDtor();
}

void CHMMJCreateRoom::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CHMMJCreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHMMJCreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHMMJCreateRoom_descriptor_;
}

const CHMMJCreateRoom& CHMMJCreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CHMMJCreateRoom* CHMMJCreateRoom::default_instance_ = NULL;

CHMMJCreateRoom* CHMMJCreateRoom::New() const {
  return new CHMMJCreateRoom;
}

void CHMMJCreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28672u;
    type_ = 0u;
    ante_ = 0u;
    round_ = 0u;
    bao_ = 0u;
    bang_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHMMJCreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28672];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ante;
        break;
      }

      // optional uint32 ante = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ante:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ante_)));
          set_has_ante();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_round;
        break;
      }

      // optional uint32 round = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bao;
        break;
      }

      // optional uint32 bao = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bao_)));
          set_has_bao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bang;
        break;
      }

      // optional uint32 bang = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bang_)));
          set_has_bang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_uid;
        break;
      }

      // optional string uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHMMJCreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28672];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 ante = 3;
  if (has_ante()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ante(), output);
  }

  // optional uint32 round = 4;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->round(), output);
  }

  // optional uint32 bao = 5;
  if (has_bao()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bao(), output);
  }

  // optional uint32 bang = 6;
  if (has_bang()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bang(), output);
  }

  // optional string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHMMJCreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28672];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 ante = 3;
  if (has_ante()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ante(), target);
  }

  // optional uint32 round = 4;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->round(), target);
  }

  // optional uint32 bao = 5;
  if (has_bao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bao(), target);
  }

  // optional uint32 bang = 6;
  if (has_bang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bang(), target);
  }

  // optional string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHMMJCreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28672];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 ante = 3;
    if (has_ante()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ante());
    }

    // optional uint32 round = 4;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional uint32 bao = 5;
    if (has_bao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bao());
    }

    // optional uint32 bang = 6;
    if (has_bang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bang());
    }

    // optional string uid = 7;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHMMJCreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHMMJCreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHMMJCreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHMMJCreateRoom::MergeFrom(const CHMMJCreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ante()) {
      set_ante(from.ante());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_bao()) {
      set_bao(from.bao());
    }
    if (from.has_bang()) {
      set_bang(from.bang());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHMMJCreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHMMJCreateRoom::CopyFrom(const CHMMJCreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHMMJCreateRoom::IsInitialized() const {

  return true;
}

void CHMMJCreateRoom::Swap(CHMMJCreateRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(type_, other->type_);
    std::swap(ante_, other->ante_);
    std::swap(round_, other->round_);
    std::swap(bao_, other->bao_);
    std::swap(bang_, other->bang_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHMMJCreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHMMJCreateRoom_descriptor_;
  metadata.reflection = CHMMJCreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SHMMJCreateRoom::kCmdFieldNumber;
const int SHMMJCreateRoom::kRoomdataFieldNumber;
const int SHMMJCreateRoom::kRoomuserFieldNumber;
const int SHMMJCreateRoom::kErrFieldNumber;
#endif  // !_MSC_VER

SHMMJCreateRoom::SHMMJCreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SHMMJCreateRoom::InitAsDefaultInstance() {
  roomdata_ = const_cast< ::protocol::RoomData*>(&::protocol::RoomData::default_instance());
  roomuser_ = const_cast< ::protocol::RoomUser*>(&::protocol::RoomUser::default_instance());
}

SHMMJCreateRoom::SHMMJCreateRoom(const SHMMJCreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SHMMJCreateRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28672u;
  roomdata_ = NULL;
  roomuser_ = NULL;
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SHMMJCreateRoom::~SHMMJCreateRoom() {
  SharedDtor();
}

void SHMMJCreateRoom::SharedDtor() {
  if (this != default_instance_) {
    delete roomdata_;
    delete roomuser_;
  }
}

void SHMMJCreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SHMMJCreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHMMJCreateRoom_descriptor_;
}

const SHMMJCreateRoom& SHMMJCreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SHMMJCreateRoom* SHMMJCreateRoom::default_instance_ = NULL;

SHMMJCreateRoom* SHMMJCreateRoom::New() const {
  return new SHMMJCreateRoom;
}

void SHMMJCreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28672u;
    if (has_roomdata()) {
      if (roomdata_ != NULL) roomdata_->::protocol::RoomData::Clear();
    }
    if (has_roomuser()) {
      if (roomuser_ != NULL) roomuser_->::protocol::RoomUser::Clear();
    }
    err_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SHMMJCreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28672];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomdata;
        break;
      }

      // optional .protocol.RoomData roomdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomuser;
        break;
      }

      // optional .protocol.RoomUser roomuser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomuser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_err;
        break;
      }

      // optional uint32 err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SHMMJCreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28672];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .protocol.RoomData roomdata = 2;
  if (has_roomdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomdata(), output);
  }

  // optional .protocol.RoomUser roomuser = 3;
  if (has_roomuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roomuser(), output);
  }

  // optional uint32 err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SHMMJCreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28672];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .protocol.RoomData roomdata = 2;
  if (has_roomdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomdata(), target);
  }

  // optional .protocol.RoomUser roomuser = 3;
  if (has_roomuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roomuser(), target);
  }

  // optional uint32 err = 4;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SHMMJCreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28672];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .protocol.RoomData roomdata = 2;
    if (has_roomdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomdata());
    }

    // optional .protocol.RoomUser roomuser = 3;
    if (has_roomuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomuser());
    }

    // optional uint32 err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SHMMJCreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SHMMJCreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SHMMJCreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SHMMJCreateRoom::MergeFrom(const SHMMJCreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_roomdata()) {
      mutable_roomdata()->::protocol::RoomData::MergeFrom(from.roomdata());
    }
    if (from.has_roomuser()) {
      mutable_roomuser()->::protocol::RoomUser::MergeFrom(from.roomuser());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SHMMJCreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHMMJCreateRoom::CopyFrom(const SHMMJCreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHMMJCreateRoom::IsInitialized() const {

  return true;
}

void SHMMJCreateRoom::Swap(SHMMJCreateRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(roomdata_, other->roomdata_);
    std::swap(roomuser_, other->roomuser_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SHMMJCreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SHMMJCreateRoom_descriptor_;
  metadata.reflection = SHMMJCreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHMMJEnterRoom::kCmdFieldNumber;
const int CHMMJEnterRoom::kRoomidFieldNumber;
const int CHMMJEnterRoom::kRtypeFieldNumber;
const int CHMMJEnterRoom::kUidFieldNumber;
#endif  // !_MSC_VER

CHMMJEnterRoom::CHMMJEnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHMMJEnterRoom::InitAsDefaultInstance() {
}

CHMMJEnterRoom::CHMMJEnterRoom(const CHMMJEnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHMMJEnterRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28673u;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtype_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHMMJEnterRoom::~CHMMJEnterRoom() {
  SharedDtor();
}

void CHMMJEnterRoom::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CHMMJEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHMMJEnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHMMJEnterRoom_descriptor_;
}

const CHMMJEnterRoom& CHMMJEnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CHMMJEnterRoom* CHMMJEnterRoom::default_instance_ = NULL;

CHMMJEnterRoom* CHMMJEnterRoom::New() const {
  return new CHMMJEnterRoom;
}

void CHMMJEnterRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28673u;
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    rtype_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHMMJEnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28673];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // optional string roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtype;
        break;
      }

      // optional uint32 rtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtype_)));
          set_has_rtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHMMJEnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28673];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional string roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomid(), output);
  }

  // optional uint32 rtype = 3;
  if (has_rtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtype(), output);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHMMJEnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28673];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional string roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomid(), target);
  }

  // optional uint32 rtype = 3;
  if (has_rtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtype(), target);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHMMJEnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28673];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional string roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional uint32 rtype = 3;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtype());
    }

    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHMMJEnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHMMJEnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHMMJEnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHMMJEnterRoom::MergeFrom(const CHMMJEnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_rtype()) {
      set_rtype(from.rtype());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHMMJEnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHMMJEnterRoom::CopyFrom(const CHMMJEnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHMMJEnterRoom::IsInitialized() const {

  return true;
}

void CHMMJEnterRoom::Swap(CHMMJEnterRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(roomid_, other->roomid_);
    std::swap(rtype_, other->rtype_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHMMJEnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHMMJEnterRoom_descriptor_;
  metadata.reflection = CHMMJEnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SHMMJEnterRoom::kCmdFieldNumber;
const int SHMMJEnterRoom::kRoomdataFieldNumber;
const int SHMMJEnterRoom::kRoomusersFieldNumber;
const int SHMMJEnterRoom::kSvFieldNumber;
const int SHMMJEnterRoom::kUidFieldNumber;
const int SHMMJEnterRoom::kErrFieldNumber;
#endif  // !_MSC_VER

SHMMJEnterRoom::SHMMJEnterRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SHMMJEnterRoom::InitAsDefaultInstance() {
  roomdata_ = const_cast< ::protocol::RoomData*>(&::protocol::RoomData::default_instance());
}

SHMMJEnterRoom::SHMMJEnterRoom(const SHMMJEnterRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SHMMJEnterRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28673u;
  roomdata_ = NULL;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SHMMJEnterRoom::~SHMMJEnterRoom() {
  SharedDtor();
}

void SHMMJEnterRoom::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
    delete roomdata_;
  }
}

void SHMMJEnterRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SHMMJEnterRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHMMJEnterRoom_descriptor_;
}

const SHMMJEnterRoom& SHMMJEnterRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SHMMJEnterRoom* SHMMJEnterRoom::default_instance_ = NULL;

SHMMJEnterRoom* SHMMJEnterRoom::New() const {
  return new SHMMJEnterRoom;
}

void SHMMJEnterRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28673u;
    if (has_roomdata()) {
      if (roomdata_ != NULL) roomdata_->::protocol::RoomData::Clear();
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    err_ = 0u;
  }
  roomusers_.Clear();
  sv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SHMMJEnterRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28673];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomdata;
        break;
      }

      // optional .protocol.RoomData roomdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomusers;
        break;
      }

      // repeated .protocol.RoomUser roomusers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomusers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomusers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomusers;
        if (input->ExpectTag(34)) goto parse_sv;
        break;
      }

      // repeated .protocol.SVote sv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sv;
        if (input->ExpectTag(42)) goto parse_uid;
        break;
      }

      // optional string uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_err;
        break;
      }

      // optional uint32 err = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SHMMJEnterRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28673];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .protocol.RoomData roomdata = 2;
  if (has_roomdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomdata(), output);
  }

  // repeated .protocol.RoomUser roomusers = 3;
  for (int i = 0; i < this->roomusers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roomusers(i), output);
  }

  // repeated .protocol.SVote sv = 4;
  for (int i = 0; i < this->sv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sv(i), output);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uid(), output);
  }

  // optional uint32 err = 6;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SHMMJEnterRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28673];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .protocol.RoomData roomdata = 2;
  if (has_roomdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomdata(), target);
  }

  // repeated .protocol.RoomUser roomusers = 3;
  for (int i = 0; i < this->roomusers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roomusers(i), target);
  }

  // repeated .protocol.SVote sv = 4;
  for (int i = 0; i < this->sv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sv(i), target);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uid(), target);
  }

  // optional uint32 err = 6;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SHMMJEnterRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28673];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .protocol.RoomData roomdata = 2;
    if (has_roomdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomdata());
    }

    // optional string uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional uint32 err = 6;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  // repeated .protocol.RoomUser roomusers = 3;
  total_size += 1 * this->roomusers_size();
  for (int i = 0; i < this->roomusers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomusers(i));
  }

  // repeated .protocol.SVote sv = 4;
  total_size += 1 * this->sv_size();
  for (int i = 0; i < this->sv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SHMMJEnterRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SHMMJEnterRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SHMMJEnterRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SHMMJEnterRoom::MergeFrom(const SHMMJEnterRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomusers_.MergeFrom(from.roomusers_);
  sv_.MergeFrom(from.sv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_roomdata()) {
      mutable_roomdata()->::protocol::RoomData::MergeFrom(from.roomdata());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SHMMJEnterRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHMMJEnterRoom::CopyFrom(const SHMMJEnterRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHMMJEnterRoom::IsInitialized() const {

  return true;
}

void SHMMJEnterRoom::Swap(SHMMJEnterRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(roomdata_, other->roomdata_);
    roomusers_.Swap(&other->roomusers_);
    sv_.Swap(&other->sv_);
    std::swap(uid_, other->uid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SHMMJEnterRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SHMMJEnterRoom_descriptor_;
  metadata.reflection = SHMMJEnterRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SComein::kCmdFieldNumber;
const int SComein::kRoomuserFieldNumber;
const int SComein::kUidFieldNumber;
#endif  // !_MSC_VER

SComein::SComein()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SComein::InitAsDefaultInstance() {
  roomuser_ = const_cast< ::protocol::RoomUser*>(&::protocol::RoomUser::default_instance());
}

SComein::SComein(const SComein& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SComein::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28674u;
  roomuser_ = NULL;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SComein::~SComein() {
  SharedDtor();
}

void SComein::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
    delete roomuser_;
  }
}

void SComein::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SComein::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SComein_descriptor_;
}

const SComein& SComein::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SComein* SComein::default_instance_ = NULL;

SComein* SComein::New() const {
  return new SComein;
}

void SComein::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28674u;
    if (has_roomuser()) {
      if (roomuser_ != NULL) roomuser_->::protocol::RoomUser::Clear();
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SComein::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28674];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomuser;
        break;
      }

      // optional .protocol.RoomUser roomuser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomuser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SComein::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28674];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional .protocol.RoomUser roomuser = 2;
  if (has_roomuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomuser(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SComein::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28674];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional .protocol.RoomUser roomuser = 2;
  if (has_roomuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomuser(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SComein::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28674];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional .protocol.RoomUser roomuser = 2;
    if (has_roomuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomuser());
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SComein::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SComein* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SComein*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SComein::MergeFrom(const SComein& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_roomuser()) {
      mutable_roomuser()->::protocol::RoomUser::MergeFrom(from.roomuser());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SComein::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SComein::CopyFrom(const SComein& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SComein::IsInitialized() const {

  return true;
}

void SComein::Swap(SComein* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(roomuser_, other->roomuser_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SComein::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SComein_descriptor_;
  metadata.reflection = SComein_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CBegin::kCmdFieldNumber;
const int CBegin::kTypeFieldNumber;
const int CBegin::kUidFieldNumber;
#endif  // !_MSC_VER

CBegin::CBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CBegin::InitAsDefaultInstance() {
}

CBegin::CBegin(const CBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CBegin::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28675u;
  type_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CBegin::~CBegin() {
  SharedDtor();
}

void CBegin::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CBegin_descriptor_;
}

const CBegin& CBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CBegin* CBegin::default_instance_ = NULL;

CBegin* CBegin::New() const {
  return new CBegin;
}

void CBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28675u;
    type_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28675];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28675];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28675];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28675];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CBegin::MergeFrom(const CBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBegin::CopyFrom(const CBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBegin::IsInitialized() const {

  return true;
}

void CBegin::Swap(CBegin* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CBegin_descriptor_;
  metadata.reflection = CBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SBegin::kCmdFieldNumber;
const int SBegin::kTypeFieldNumber;
const int SBegin::kUidFieldNumber;
const int SBegin::kErrFieldNumber;
#endif  // !_MSC_VER

SBegin::SBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SBegin::InitAsDefaultInstance() {
}

SBegin::SBegin(const SBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SBegin::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28675u;
  type_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SBegin::~SBegin() {
  SharedDtor();
}

void SBegin::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void SBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SBegin_descriptor_;
}

const SBegin& SBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SBegin* SBegin::default_instance_ = NULL;

SBegin* SBegin::New() const {
  return new SBegin;
}

void SBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28675u;
    type_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    err_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28675];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_err;
        break;
      }

      // optional uint32 err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28675];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  // optional uint32 err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28675];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  // optional uint32 err = 4;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28675];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional uint32 err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SBegin::MergeFrom(const SBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBegin::CopyFrom(const SBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBegin::IsInitialized() const {

  return true;
}

void SBegin::Swap(SBegin* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SBegin_descriptor_;
  metadata.reflection = SBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CReady::kCmdFieldNumber;
const int CReady::kReadyFieldNumber;
const int CReady::kUidFieldNumber;
#endif  // !_MSC_VER

CReady::CReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CReady::InitAsDefaultInstance() {
}

CReady::CReady(const CReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CReady::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28676u;
  ready_ = false;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CReady::~CReady() {
  SharedDtor();
}

void CReady::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CReady_descriptor_;
}

const CReady& CReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CReady* CReady::default_instance_ = NULL;

CReady* CReady::New() const {
  return new CReady;
}

void CReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28676u;
    ready_ = false;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28676];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready;
        break;
      }

      // optional bool ready = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28676];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool ready = 2;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ready(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28676];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool ready = 2;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ready(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28676];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool ready = 2;
    if (has_ready()) {
      total_size += 1 + 1;
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CReady::MergeFrom(const CReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReady::CopyFrom(const CReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReady::IsInitialized() const {

  return true;
}

void CReady::Swap(CReady* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(ready_, other->ready_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CReady_descriptor_;
  metadata.reflection = CReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SReady::kCmdFieldNumber;
const int SReady::kReadyFieldNumber;
const int SReady::kPositionFieldNumber;
const int SReady::kUidFieldNumber;
const int SReady::kSuidFieldNumber;
const int SReady::kErrFieldNumber;
#endif  // !_MSC_VER

SReady::SReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SReady::InitAsDefaultInstance() {
}

SReady::SReady(const SReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SReady::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28676u;
  ready_ = false;
  position_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SReady::~SReady() {
  SharedDtor();
}

void SReady::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
  }
}

void SReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SReady_descriptor_;
}

const SReady& SReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SReady* SReady::default_instance_ = NULL;

SReady* SReady::New() const {
  return new SReady;
}

void SReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28676u;
    ready_ = false;
    position_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
    err_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28676];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready;
        break;
      }

      // optional bool ready = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_suid;
        break;
      }

      // optional string suid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_err;
        break;
      }

      // optional uint32 err = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28676];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool ready = 2;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ready(), output);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->suid(), output);
  }

  // optional uint32 err = 6;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28676];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool ready = 2;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ready(), target);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suid(), target);
  }

  // optional uint32 err = 6;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28676];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool ready = 2;
    if (has_ready()) {
      total_size += 1 + 1;
    }

    // optional uint32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string suid = 5;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

    // optional uint32 err = 6;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SReady::MergeFrom(const SReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SReady::CopyFrom(const SReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SReady::IsInitialized() const {

  return true;
}

void SReady::Swap(SReady* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(ready_, other->ready_);
    std::swap(position_, other->position_);
    std::swap(uid_, other->uid_);
    std::swap(suid_, other->suid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SReady_descriptor_;
  metadata.reflection = SReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLeave::kCmdFieldNumber;
const int CLeave::kUidFieldNumber;
const int CLeave::kZhudongFieldNumber;
#endif  // !_MSC_VER

CLeave::CLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLeave::InitAsDefaultInstance() {
}

CLeave::CLeave(const CLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLeave::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28677u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zhudong_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLeave::~CLeave() {
  SharedDtor();
}

void CLeave::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLeave_descriptor_;
}

const CLeave& CLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CLeave* CLeave::default_instance_ = NULL;

CLeave* CLeave::New() const {
  return new CLeave;
}

void CLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28677u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    zhudong_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28677];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zhudong;
        break;
      }

      // optional bool zhudong = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhudong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zhudong_)));
          set_has_zhudong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28677];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }

  // optional bool zhudong = 3;
  if (has_zhudong()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->zhudong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28677];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional bool zhudong = 3;
  if (has_zhudong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->zhudong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28677];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional bool zhudong = 3;
    if (has_zhudong()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLeave::MergeFrom(const CLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_zhudong()) {
      set_zhudong(from.zhudong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLeave::CopyFrom(const CLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLeave::IsInitialized() const {

  return true;
}

void CLeave::Swap(CLeave* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(uid_, other->uid_);
    std::swap(zhudong_, other->zhudong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLeave_descriptor_;
  metadata.reflection = CLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLeave::kCmdFieldNumber;
const int SLeave::kUidFieldNumber;
const int SLeave::kSuidFieldNumber;
const int SLeave::kErrFieldNumber;
#endif  // !_MSC_VER

SLeave::SLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLeave::InitAsDefaultInstance() {
}

SLeave::SLeave(const SLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLeave::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28677u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLeave::~SLeave() {
  SharedDtor();
}

void SLeave::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
  }
}

void SLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLeave_descriptor_;
}

const SLeave& SLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SLeave* SLeave::default_instance_ = NULL;

SLeave* SLeave::New() const {
  return new SLeave;
}

void SLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28677u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
    err_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28677];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suid;
        break;
      }

      // optional string suid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_err;
        break;
      }

      // optional uint32 err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28677];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }

  // optional string suid = 3;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->suid(), output);
  }

  // optional uint32 err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28677];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional string suid = 3;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->suid(), target);
  }

  // optional uint32 err = 4;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28677];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string suid = 3;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

    // optional uint32 err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLeave::MergeFrom(const SLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLeave::CopyFrom(const SLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLeave::IsInitialized() const {

  return true;
}

void SLeave::Swap(SLeave* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(uid_, other->uid_);
    std::swap(suid_, other->suid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLeave_descriptor_;
  metadata.reflection = SLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLine::kCmdFieldNumber;
const int CLine::kOnlineFieldNumber;
const int CLine::kUidFieldNumber;
#endif  // !_MSC_VER

CLine::CLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLine::InitAsDefaultInstance() {
}

CLine::CLine(const CLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLine::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28678u;
  online_ = false;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLine::~CLine() {
  SharedDtor();
}

void CLine::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLine_descriptor_;
}

const CLine& CLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CLine* CLine::default_instance_ = NULL;

CLine* CLine::New() const {
  return new CLine;
}

void CLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28678u;
    online_ = false;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28678];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional bool online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28678];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28678];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28678];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool online = 2;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLine::MergeFrom(const CLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLine::CopyFrom(const CLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLine::IsInitialized() const {

  return true;
}

void CLine::Swap(CLine* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(online_, other->online_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLine_descriptor_;
  metadata.reflection = CLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SLine::kCmdFieldNumber;
const int SLine::kOnlineFieldNumber;
const int SLine::kPositionFieldNumber;
const int SLine::kUidFieldNumber;
const int SLine::kSuidFieldNumber;
const int SLine::kErrFieldNumber;
#endif  // !_MSC_VER

SLine::SLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SLine::InitAsDefaultInstance() {
}

SLine::SLine(const SLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SLine::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28678u;
  online_ = false;
  position_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLine::~SLine() {
  SharedDtor();
}

void SLine::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
  }
}

void SLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLine_descriptor_;
}

const SLine& SLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SLine* SLine::default_instance_ = NULL;

SLine* SLine::New() const {
  return new SLine;
}

void SLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28678u;
    online_ = false;
    position_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
    err_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28678];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional bool online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_suid;
        break;
      }

      // optional string suid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_err;
        break;
      }

      // optional uint32 err = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28678];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->suid(), output);
  }

  // optional uint32 err = 6;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28678];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suid(), target);
  }

  // optional uint32 err = 6;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28678];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool online = 2;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string suid = 5;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

    // optional uint32 err = 6;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLine::MergeFrom(const SLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLine::CopyFrom(const SLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLine::IsInitialized() const {

  return true;
}

void SLine::Swap(SLine* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(online_, other->online_);
    std::swap(position_, other->position_);
    std::swap(uid_, other->uid_);
    std::swap(suid_, other->suid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLine_descriptor_;
  metadata.reflection = SLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDissolveRoom::kCmdFieldNumber;
const int CDissolveRoom::kRidFieldNumber;
const int CDissolveRoom::kUidFieldNumber;
#endif  // !_MSC_VER

CDissolveRoom::CDissolveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDissolveRoom::InitAsDefaultInstance() {
}

CDissolveRoom::CDissolveRoom(const CDissolveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDissolveRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28679u;
  rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDissolveRoom::~CDissolveRoom() {
  SharedDtor();
}

void CDissolveRoom::SharedDtor() {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    delete rid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CDissolveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDissolveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDissolveRoom_descriptor_;
}

const CDissolveRoom& CDissolveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CDissolveRoom* CDissolveRoom::default_instance_ = NULL;

CDissolveRoom* CDissolveRoom::New() const {
  return new CDissolveRoom;
}

void CDissolveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28679u;
    if (has_rid()) {
      if (rid_ != &::google::protobuf::internal::kEmptyString) {
        rid_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDissolveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28679];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rid;
        break;
      }

      // optional string rid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDissolveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28679];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional string rid = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rid(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDissolveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28679];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional string rid = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rid(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDissolveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28679];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional string rid = 2;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rid());
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDissolveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDissolveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDissolveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDissolveRoom::MergeFrom(const CDissolveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDissolveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDissolveRoom::CopyFrom(const CDissolveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDissolveRoom::IsInitialized() const {

  return true;
}

void CDissolveRoom::Swap(CDissolveRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(rid_, other->rid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDissolveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDissolveRoom_descriptor_;
  metadata.reflection = CDissolveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SDissolveRoom::kCmdFieldNumber;
const int SDissolveRoom::kRidFieldNumber;
const int SDissolveRoom::kTimeFieldNumber;
const int SDissolveRoom::kPositionFieldNumber;
const int SDissolveRoom::kUidFieldNumber;
const int SDissolveRoom::kSuidFieldNumber;
const int SDissolveRoom::kErrFieldNumber;
#endif  // !_MSC_VER

SDissolveRoom::SDissolveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SDissolveRoom::InitAsDefaultInstance() {
}

SDissolveRoom::SDissolveRoom(const SDissolveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SDissolveRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28679u;
  rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  position_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDissolveRoom::~SDissolveRoom() {
  SharedDtor();
}

void SDissolveRoom::SharedDtor() {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    delete rid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
  }
}

void SDissolveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDissolveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDissolveRoom_descriptor_;
}

const SDissolveRoom& SDissolveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SDissolveRoom* SDissolveRoom::default_instance_ = NULL;

SDissolveRoom* SDissolveRoom::New() const {
  return new SDissolveRoom;
}

void SDissolveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28679u;
    if (has_rid()) {
      if (rid_ != &::google::protobuf::internal::kEmptyString) {
        rid_->clear();
      }
    }
    time_ = 0u;
    position_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
    err_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SDissolveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28679];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rid;
        break;
      }

      // optional string rid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rid().data(), this->rid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // optional uint32 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uid;
        break;
      }

      // optional string uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_suid;
        break;
      }

      // optional string suid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_err;
        break;
      }

      // optional uint32 err = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SDissolveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28679];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional string rid = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rid(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position(), output);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->uid(), output);
  }

  // optional string suid = 6;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->suid(), output);
  }

  // optional uint32 err = 7;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SDissolveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28679];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional string rid = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rid().data(), this->rid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rid(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position(), target);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uid(), target);
  }

  // optional string suid = 6;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->suid(), target);
  }

  // optional uint32 err = 7;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SDissolveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28679];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional string rid = 2;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rid());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional string uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string suid = 6;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

    // optional uint32 err = 7;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDissolveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SDissolveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SDissolveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SDissolveRoom::MergeFrom(const SDissolveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SDissolveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDissolveRoom::CopyFrom(const SDissolveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDissolveRoom::IsInitialized() const {

  return true;
}

void SDissolveRoom::Swap(SDissolveRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(rid_, other->rid_);
    std::swap(time_, other->time_);
    std::swap(position_, other->position_);
    std::swap(uid_, other->uid_);
    std::swap(suid_, other->suid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SDissolveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDissolveRoom_descriptor_;
  metadata.reflection = SDissolveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CVote::kCmdFieldNumber;
const int CVote::kAgreeFieldNumber;
const int CVote::kUidFieldNumber;
#endif  // !_MSC_VER

CVote::CVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CVote::InitAsDefaultInstance() {
}

CVote::CVote(const CVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CVote::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28680u;
  agree_ = false;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVote::~CVote() {
  SharedDtor();
}

void CVote::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVote_descriptor_;
}

const CVote& CVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CVote* CVote::default_instance_ = NULL;

CVote* CVote::New() const {
  return new CVote;
}

void CVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28680u;
    agree_ = false;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28680];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28680];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28680];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28680];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CVote::MergeFrom(const CVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVote::CopyFrom(const CVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVote::IsInitialized() const {

  return true;
}

void CVote::Swap(CVote* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(agree_, other->agree_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CVote_descriptor_;
  metadata.reflection = CVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SVote::kCmdFieldNumber;
const int SVote::kAgreeFieldNumber;
const int SVote::kPositionFieldNumber;
const int SVote::kUidFieldNumber;
const int SVote::kSuidFieldNumber;
#endif  // !_MSC_VER

SVote::SVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SVote::InitAsDefaultInstance() {
}

SVote::SVote(const SVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SVote::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28680u;
  agree_ = false;
  position_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SVote::~SVote() {
  SharedDtor();
}

void SVote::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
  }
}

void SVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SVote_descriptor_;
}

const SVote& SVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SVote* SVote::default_instance_ = NULL;

SVote* SVote::New() const {
  return new SVote;
}

void SVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28680u;
    agree_ = false;
    position_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28680];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_suid;
        break;
      }

      // optional string suid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28680];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->suid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28680];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28680];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string suid = 5;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SVote::MergeFrom(const SVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVote::CopyFrom(const SVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVote::IsInitialized() const {

  return true;
}

void SVote::Swap(SVote* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(agree_, other->agree_);
    std::swap(position_, other->position_);
    std::swap(uid_, other->uid_);
    std::swap(suid_, other->suid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SVote_descriptor_;
  metadata.reflection = SVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SVoteResult::kCmdFieldNumber;
const int SVoteResult::kDissolveFieldNumber;
const int SVoteResult::kUidFieldNumber;
const int SVoteResult::kSuidFieldNumber;
#endif  // !_MSC_VER

SVoteResult::SVoteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SVoteResult::InitAsDefaultInstance() {
}

SVoteResult::SVoteResult(const SVoteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SVoteResult::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28681u;
  dissolve_ = false;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SVoteResult::~SVoteResult() {
  SharedDtor();
}

void SVoteResult::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
  }
}

void SVoteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SVoteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SVoteResult_descriptor_;
}

const SVoteResult& SVoteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SVoteResult* SVoteResult::default_instance_ = NULL;

SVoteResult* SVoteResult::New() const {
  return new SVoteResult;
}

void SVoteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28681u;
    dissolve_ = false;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SVoteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28681];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dissolve;
        break;
      }

      // optional bool dissolve = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dissolve_)));
          set_has_dissolve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_suid;
        break;
      }

      // optional string suid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SVoteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28681];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool dissolve = 2;
  if (has_dissolve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dissolve(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->suid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SVoteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28681];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool dissolve = 2;
  if (has_dissolve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dissolve(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SVoteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28681];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool dissolve = 2;
    if (has_dissolve()) {
      total_size += 1 + 1;
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string suid = 5;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SVoteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SVoteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SVoteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SVoteResult::MergeFrom(const SVoteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_dissolve()) {
      set_dissolve(from.dissolve());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SVoteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVoteResult::CopyFrom(const SVoteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVoteResult::IsInitialized() const {

  return true;
}

void SVoteResult::Swap(SVoteResult* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(dissolve_, other->dissolve_);
    std::swap(uid_, other->uid_);
    std::swap(suid_, other->suid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SVoteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SVoteResult_descriptor_;
  metadata.reflection = SVoteResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRChat::kCmdFieldNumber;
const int CRChat::kContentFieldNumber;
const int CRChat::kUidFieldNumber;
#endif  // !_MSC_VER

CRChat::CRChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRChat::InitAsDefaultInstance() {
}

CRChat::CRChat(const CRChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRChat::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28682u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRChat::~CRChat() {
  SharedDtor();
}

void CRChat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CRChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRChat_descriptor_;
}

const CRChat& CRChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

CRChat* CRChat::default_instance_ = NULL;

CRChat* CRChat::New() const {
  return new CRChat;
}

void CRChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28682u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28682];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28682];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28682];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28682];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRChat::MergeFrom(const CRChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRChat::CopyFrom(const CRChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRChat::IsInitialized() const {

  return true;
}

void CRChat::Swap(CRChat* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(content_, other->content_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRChat_descriptor_;
  metadata.reflection = CRChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRChat::kCmdFieldNumber;
const int SRChat::kContentFieldNumber;
const int SRChat::kUidFieldNumber;
const int SRChat::kPosFieldNumber;
const int SRChat::kSuidFieldNumber;
#endif  // !_MSC_VER

SRChat::SRChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRChat::InitAsDefaultInstance() {
}

SRChat::SRChat(const SRChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRChat::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28682u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = 0u;
  suid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRChat::~SRChat() {
  SharedDtor();
}

void SRChat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (suid_ != &::google::protobuf::internal::kEmptyString) {
    delete suid_;
  }
  if (this != default_instance_) {
  }
}

void SRChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRChat_descriptor_;
}

const SRChat& SRChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Room_2eproto();
  return *default_instance_;
}

SRChat* SRChat::default_instance_ = NULL;

SRChat* SRChat::New() const {
  return new SRChat;
}

void SRChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 28682u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    pos_ = 0u;
    if (has_suid()) {
      if (suid_ != &::google::protobuf::internal::kEmptyString) {
        suid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 28682];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_suid;
        break;
      }

      // optional string suid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suid().data(), this->suid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 28682];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->suid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 28682];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos(), target);
  }

  // optional string suid = 5;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suid().data(), this->suid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 28682];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional uint32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional string suid = 5;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRChat::MergeFrom(const SRChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_suid()) {
      set_suid(from.suid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRChat::CopyFrom(const SRChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRChat::IsInitialized() const {

  return true;
}

void SRChat::Swap(SRChat* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(content_, other->content_);
    std::swap(uid_, other->uid_);
    std::swap(pos_, other->pos_);
    std::swap(suid_, other->suid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRChat_descriptor_;
  metadata.reflection = SRChat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

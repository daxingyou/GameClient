// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigProto.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* CConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPushCurrency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPushCurrency_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigProto_2eproto() {
  protobuf_AddDesc_ConfigProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigProto.proto");
  GOOGLE_CHECK(file != NULL);
  CConfig_descriptor_ = file->message_type(0);
  static const int CConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfig, cmd_),
  };
  CConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CConfig_descriptor_,
      CConfig::default_instance_,
      CConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CConfig));
  SConfig_descriptor_ = file->message_type(1);
  static const int SConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, firstbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, yqs_),
  };
  SConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SConfig_descriptor_,
      SConfig::default_instance_,
      SConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SConfig));
  SPushCurrency_descriptor_ = file->message_type(2);
  static const int SPushCurrency_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, cdiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, ccard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, cgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, err_),
  };
  SPushCurrency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPushCurrency_descriptor_,
      SPushCurrency::default_instance_,
      SPushCurrency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPushCurrency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPushCurrency));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CConfig_descriptor_, &CConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SConfig_descriptor_, &SConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPushCurrency_descriptor_, &SPushCurrency::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigProto_2eproto() {
  delete CConfig::default_instance_;
  delete CConfig_reflection_;
  delete SConfig::default_instance_;
  delete SConfig_reflection_;
  delete SPushCurrency::default_instance_;
  delete SPushCurrency_reflection_;
}

void protobuf_AddDesc_ConfigProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_Vo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ConfigProto.proto\022\010protocol\032\010Vo.proto\""
    "\035\n\007CConfig\022\022\n\003cmd\030\001 \002(\r:\00520479\"\206\001\n\007SConf"
    "ig\022\022\n\003cmd\030\001 \002(\r:\00520479\022\014\n\004mail\030\002 \001(\010\022\016\n\006"
    "active\030\003 \001(\010\022\020\n\010firstbuy\030\004 \001(\010\022\014\n\004task\030\005"
    " \001(\010\022\014\n\004free\030\006 \001(\010\022\016\n\006friend\030\007 \001(\010\022\013\n\003yq"
    "s\030\010 \001(\r\"\215\001\n\rSPushCurrency\022\022\n\003cmd\030\001 \001(\r:\005"
    "24576\022\017\n\007diamond\030\002 \001(\r\022\014\n\004card\030\003 \001(\r\022\014\n\004"
    "gold\030\004 \001(\r\022\020\n\010cdiamond\030\005 \001(\r\022\r\n\005ccard\030\006 "
    "\001(\r\022\r\n\005cgold\030\007 \001(\r\022\013\n\003err\030\010 \001(\r", 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigProto.proto", &protobuf_RegisterTypes);
  CConfig::default_instance_ = new CConfig();
  SConfig::default_instance_ = new SConfig();
  SPushCurrency::default_instance_ = new SPushCurrency();
  CConfig::default_instance_->InitAsDefaultInstance();
  SConfig::default_instance_->InitAsDefaultInstance();
  SPushCurrency::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigProto_2eproto {
  StaticDescriptorInitializer_ConfigProto_2eproto() {
    protobuf_AddDesc_ConfigProto_2eproto();
  }
} static_descriptor_initializer_ConfigProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CConfig::kCmdFieldNumber;
#endif  // !_MSC_VER

CConfig::CConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CConfig::InitAsDefaultInstance() {
}

CConfig::CConfig(const CConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CConfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20479u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CConfig::~CConfig() {
  SharedDtor();
}

void CConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CConfig_descriptor_;
}

const CConfig& CConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigProto_2eproto();
  return *default_instance_;
}

CConfig* CConfig::default_instance_ = NULL;

CConfig* CConfig::New() const {
  return new CConfig;
}

void CConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 20479u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1 [default = 20479];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cmd = 1 [default = 20479];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cmd = 1 [default = 20479];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1 [default = 20479];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CConfig::MergeFrom(const CConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CConfig::CopyFrom(const CConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CConfig::Swap(CConfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CConfig_descriptor_;
  metadata.reflection = CConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SConfig::kCmdFieldNumber;
const int SConfig::kMailFieldNumber;
const int SConfig::kActiveFieldNumber;
const int SConfig::kFirstbuyFieldNumber;
const int SConfig::kTaskFieldNumber;
const int SConfig::kFreeFieldNumber;
const int SConfig::kFriendFieldNumber;
const int SConfig::kYqsFieldNumber;
#endif  // !_MSC_VER

SConfig::SConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SConfig::InitAsDefaultInstance() {
}

SConfig::SConfig(const SConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SConfig::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20479u;
  mail_ = false;
  active_ = false;
  firstbuy_ = false;
  task_ = false;
  free_ = false;
  friend__ = false;
  yqs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SConfig::~SConfig() {
  SharedDtor();
}

void SConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SConfig_descriptor_;
}

const SConfig& SConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigProto_2eproto();
  return *default_instance_;
}

SConfig* SConfig::default_instance_ = NULL;

SConfig* SConfig::New() const {
  return new SConfig;
}

void SConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 20479u;
    mail_ = false;
    active_ = false;
    firstbuy_ = false;
    task_ = false;
    free_ = false;
    friend__ = false;
    yqs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1 [default = 20479];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail;
        break;
      }

      // optional bool mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mail_)));
          set_has_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_firstbuy;
        break;
      }

      // optional bool firstbuy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstbuy_)));
          set_has_firstbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_task;
        break;
      }

      // optional bool task = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &task_)));
          set_has_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_free;
        break;
      }

      // optional bool free = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_friend;
        break;
      }

      // optional bool friend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend__)));
          set_has_friend_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_yqs;
        break;
      }

      // optional uint32 yqs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yqs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yqs_)));
          set_has_yqs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cmd = 1 [default = 20479];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional bool mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mail(), output);
  }

  // optional bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // optional bool firstbuy = 4;
  if (has_firstbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->firstbuy(), output);
  }

  // optional bool task = 5;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->task(), output);
  }

  // optional bool free = 6;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->free(), output);
  }

  // optional bool friend = 7;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->friend_(), output);
  }

  // optional uint32 yqs = 8;
  if (has_yqs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->yqs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cmd = 1 [default = 20479];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional bool mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mail(), target);
  }

  // optional bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // optional bool firstbuy = 4;
  if (has_firstbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->firstbuy(), target);
  }

  // optional bool task = 5;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->task(), target);
  }

  // optional bool free = 6;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->free(), target);
  }

  // optional bool friend = 7;
  if (has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->friend_(), target);
  }

  // optional uint32 yqs = 8;
  if (has_yqs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->yqs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cmd = 1 [default = 20479];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional bool mail = 2;
    if (has_mail()) {
      total_size += 1 + 1;
    }

    // optional bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool firstbuy = 4;
    if (has_firstbuy()) {
      total_size += 1 + 1;
    }

    // optional bool task = 5;
    if (has_task()) {
      total_size += 1 + 1;
    }

    // optional bool free = 6;
    if (has_free()) {
      total_size += 1 + 1;
    }

    // optional bool friend = 7;
    if (has_friend_()) {
      total_size += 1 + 1;
    }

    // optional uint32 yqs = 8;
    if (has_yqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yqs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SConfig::MergeFrom(const SConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_mail()) {
      set_mail(from.mail());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_firstbuy()) {
      set_firstbuy(from.firstbuy());
    }
    if (from.has_task()) {
      set_task(from.task());
    }
    if (from.has_free()) {
      set_free(from.free());
    }
    if (from.has_friend_()) {
      set_friend_(from.friend_());
    }
    if (from.has_yqs()) {
      set_yqs(from.yqs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SConfig::CopyFrom(const SConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SConfig::Swap(SConfig* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(mail_, other->mail_);
    std::swap(active_, other->active_);
    std::swap(firstbuy_, other->firstbuy_);
    std::swap(task_, other->task_);
    std::swap(free_, other->free_);
    std::swap(friend__, other->friend__);
    std::swap(yqs_, other->yqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SConfig_descriptor_;
  metadata.reflection = SConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPushCurrency::kCmdFieldNumber;
const int SPushCurrency::kDiamondFieldNumber;
const int SPushCurrency::kCardFieldNumber;
const int SPushCurrency::kGoldFieldNumber;
const int SPushCurrency::kCdiamondFieldNumber;
const int SPushCurrency::kCcardFieldNumber;
const int SPushCurrency::kCgoldFieldNumber;
const int SPushCurrency::kErrFieldNumber;
#endif  // !_MSC_VER

SPushCurrency::SPushCurrency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPushCurrency::InitAsDefaultInstance() {
}

SPushCurrency::SPushCurrency(const SPushCurrency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPushCurrency::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 24576u;
  diamond_ = 0u;
  card_ = 0u;
  gold_ = 0u;
  cdiamond_ = 0u;
  ccard_ = 0u;
  cgold_ = 0u;
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPushCurrency::~SPushCurrency() {
  SharedDtor();
}

void SPushCurrency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPushCurrency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPushCurrency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPushCurrency_descriptor_;
}

const SPushCurrency& SPushCurrency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigProto_2eproto();
  return *default_instance_;
}

SPushCurrency* SPushCurrency::default_instance_ = NULL;

SPushCurrency* SPushCurrency::New() const {
  return new SPushCurrency;
}

void SPushCurrency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 24576u;
    diamond_ = 0u;
    card_ = 0u;
    gold_ = 0u;
    cdiamond_ = 0u;
    ccard_ = 0u;
    cgold_ = 0u;
    err_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPushCurrency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1 [default = 24576];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card;
        break;
      }

      // optional uint32 card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cdiamond;
        break;
      }

      // optional uint32 cdiamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdiamond_)));
          set_has_cdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ccard;
        break;
      }

      // optional uint32 ccard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccard_)));
          set_has_ccard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cgold;
        break;
      }

      // optional uint32 cgold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cgold_)));
          set_has_cgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_err;
        break;
      }

      // optional uint32 err = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPushCurrency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1 [default = 24576];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->diamond(), output);
  }

  // optional uint32 card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card(), output);
  }

  // optional uint32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gold(), output);
  }

  // optional uint32 cdiamond = 5;
  if (has_cdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cdiamond(), output);
  }

  // optional uint32 ccard = 6;
  if (has_ccard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ccard(), output);
  }

  // optional uint32 cgold = 7;
  if (has_cgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cgold(), output);
  }

  // optional uint32 err = 8;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPushCurrency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1 [default = 24576];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->diamond(), target);
  }

  // optional uint32 card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card(), target);
  }

  // optional uint32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gold(), target);
  }

  // optional uint32 cdiamond = 5;
  if (has_cdiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cdiamond(), target);
  }

  // optional uint32 ccard = 6;
  if (has_ccard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ccard(), target);
  }

  // optional uint32 cgold = 7;
  if (has_cgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cgold(), target);
  }

  // optional uint32 err = 8;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPushCurrency::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1 [default = 24576];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 cdiamond = 5;
    if (has_cdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdiamond());
    }

    // optional uint32 ccard = 6;
    if (has_ccard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccard());
    }

    // optional uint32 cgold = 7;
    if (has_cgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cgold());
    }

    // optional uint32 err = 8;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPushCurrency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPushCurrency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPushCurrency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPushCurrency::MergeFrom(const SPushCurrency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_cdiamond()) {
      set_cdiamond(from.cdiamond());
    }
    if (from.has_ccard()) {
      set_ccard(from.ccard());
    }
    if (from.has_cgold()) {
      set_cgold(from.cgold());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPushCurrency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPushCurrency::CopyFrom(const SPushCurrency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPushCurrency::IsInitialized() const {

  return true;
}

void SPushCurrency::Swap(SPushCurrency* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(diamond_, other->diamond_);
    std::swap(card_, other->card_);
    std::swap(gold_, other->gold_);
    std::swap(cdiamond_, other->cdiamond_);
    std::swap(ccard_, other->ccard_);
    std::swap(cgold_, other->cgold_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPushCurrency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPushCurrency_descriptor_;
  metadata.reflection = SPushCurrency_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

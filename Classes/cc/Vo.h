// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vo.proto

#ifndef PROTOBUF_Vo_2eproto__INCLUDED
#define PROTOBUF_Vo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DBProto.h"
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Vo_2eproto();
void protobuf_AssignDesc_Vo_2eproto();
void protobuf_ShutdownFile_Vo_2eproto();

class Rank;
class Prop;
class ShopItem;
class Mail;
class Friend;
class Active;
class Task;

// ===================================================================

class Rank : public ::google::protobuf::Message {
 public:
  Rank();
  virtual ~Rank();

  Rank(const Rank& from);

  inline Rank& operator=(const Rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank& default_instance();

  void Swap(Rank* other);

  // implements Message ----------------------------------------------

  Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank& from);
  void MergeFrom(const Rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional string uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string uname = 3;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 3;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 number = 4;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string picurl = 6;
  inline bool has_picurl() const;
  inline void clear_picurl();
  static const int kPicurlFieldNumber = 6;
  inline const ::std::string& picurl() const;
  inline void set_picurl(const ::std::string& value);
  inline void set_picurl(const char* value);
  inline void set_picurl(const char* value, size_t size);
  inline ::std::string* mutable_picurl();
  inline ::std::string* release_picurl();
  inline void set_allocated_picurl(::std::string* picurl);

  // optional uint32 picid = 7;
  inline bool has_picid() const;
  inline void clear_picid();
  static const int kPicidFieldNumber = 7;
  inline ::google::protobuf::uint32 picid() const;
  inline void set_picid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.Rank)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_picurl();
  inline void clear_has_picurl();
  inline void set_has_picid();
  inline void clear_has_picid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 number_;
  ::std::string* uname_;
  ::std::string* picurl_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 picid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Vo_2eproto();
  friend void protobuf_AssignDesc_Vo_2eproto();
  friend void protobuf_ShutdownFile_Vo_2eproto();

  void InitAsDefaultInstance();
  static Rank* default_instance_;
};
// -------------------------------------------------------------------

class Prop : public ::google::protobuf::Message {
 public:
  Prop();
  virtual ~Prop();

  Prop(const Prop& from);

  inline Prop& operator=(const Prop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Prop& default_instance();

  void Swap(Prop* other);

  // implements Message ----------------------------------------------

  Prop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Prop& from);
  void MergeFrom(const Prop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 number = 3;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.Prop)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Vo_2eproto();
  friend void protobuf_AssignDesc_Vo_2eproto();
  friend void protobuf_ShutdownFile_Vo_2eproto();

  void InitAsDefaultInstance();
  static Prop* default_instance_;
};
// -------------------------------------------------------------------

class ShopItem : public ::google::protobuf::Message {
 public:
  ShopItem();
  virtual ~ShopItem();

  ShopItem(const ShopItem& from);

  inline ShopItem& operator=(const ShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopItem& default_instance();

  void Swap(ShopItem* other);

  // implements Message ----------------------------------------------

  ShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopItem& from);
  void MergeFrom(const ShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .protocol.Prop prop = 2;
  inline bool has_prop() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 2;
  inline const ::protocol::Prop& prop() const;
  inline ::protocol::Prop* mutable_prop();
  inline ::protocol::Prop* release_prop();
  inline void set_allocated_prop(::protocol::Prop* prop);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 number = 4;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // optional uint32 givenum = 5;
  inline bool has_givenum() const;
  inline void clear_givenum();
  static const int kGivenumFieldNumber = 5;
  inline ::google::protobuf::uint32 givenum() const;
  inline void set_givenum(::google::protobuf::uint32 value);

  // optional bool hot = 6;
  inline bool has_hot() const;
  inline void clear_hot();
  static const int kHotFieldNumber = 6;
  inline bool hot() const;
  inline void set_hot(bool value);

  // @@protoc_insertion_point(class_scope:protocol.ShopItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_prop();
  inline void clear_has_prop();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_givenum();
  inline void clear_has_givenum();
  inline void set_has_hot();
  inline void clear_has_hot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protocol::Prop* prop_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 number_;
  ::google::protobuf::uint32 givenum_;
  bool hot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Vo_2eproto();
  friend void protobuf_AssignDesc_Vo_2eproto();
  friend void protobuf_ShutdownFile_Vo_2eproto();

  void InitAsDefaultInstance();
  static ShopItem* default_instance_;
};
// -------------------------------------------------------------------

class Mail : public ::google::protobuf::Message {
 public:
  Mail();
  virtual ~Mail();

  Mail(const Mail& from);

  inline Mail& operator=(const Mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mail& default_instance();

  void Swap(Mail* other);

  // implements Message ----------------------------------------------

  Mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mail& from);
  void MergeFrom(const Mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:protocol.Mail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* title_;
  ::std::string* content_;
  ::std::string* time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Vo_2eproto();
  friend void protobuf_AssignDesc_Vo_2eproto();
  friend void protobuf_ShutdownFile_Vo_2eproto();

  void InitAsDefaultInstance();
  static Mail* default_instance_;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.DBUserInfo userinfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  inline const ::protocol::DBUserInfo& userinfo() const;
  inline ::protocol::DBUserInfo* mutable_userinfo();
  inline ::protocol::DBUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::protocol::DBUserInfo* userinfo);

  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // optional bool friend = 3;
  inline bool has_friend_() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 3;
  inline bool friend_() const;
  inline void set_friend_(bool value);

  // optional uint32 acttype = 4;
  inline bool has_acttype() const;
  inline void clear_acttype();
  static const int kActtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 acttype() const;
  inline void set_acttype(::google::protobuf::uint32 value);

  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.Friend)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_friend_();
  inline void clear_has_friend_();
  inline void set_has_acttype();
  inline void clear_has_acttype();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protocol::DBUserInfo* userinfo_;
  bool online_;
  bool friend__;
  ::google::protobuf::uint32 acttype_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Vo_2eproto();
  friend void protobuf_AssignDesc_Vo_2eproto();
  friend void protobuf_ShutdownFile_Vo_2eproto();

  void InitAsDefaultInstance();
  static Friend* default_instance_;
};
// -------------------------------------------------------------------

class Active : public ::google::protobuf::Message {
 public:
  Active();
  virtual ~Active();

  Active(const Active& from);

  inline Active& operator=(const Active& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Active& default_instance();

  void Swap(Active* other);

  // implements Message ----------------------------------------------

  Active* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Active& from);
  void MergeFrom(const Active& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:protocol.Active)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* title_;
  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Vo_2eproto();
  friend void protobuf_AssignDesc_Vo_2eproto();
  friend void protobuf_ShutdownFile_Vo_2eproto();

  void InitAsDefaultInstance();
  static Active* default_instance_;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 fcount = 5;
  inline bool has_fcount() const;
  inline void clear_fcount();
  static const int kFcountFieldNumber = 5;
  inline ::google::protobuf::uint32 fcount() const;
  inline void set_fcount(::google::protobuf::uint32 value);

  // optional uint32 finish = 6;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 6;
  inline ::google::protobuf::uint32 finish() const;
  inline void set_finish(::google::protobuf::uint32 value);

  // optional .protocol.Prop award = 7;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 7;
  inline const ::protocol::Prop& award() const;
  inline ::protocol::Prop* mutable_award();
  inline ::protocol::Prop* release_award();
  inline void set_allocated_award(::protocol::Prop* award);

  // @@protoc_insertion_point(class_scope:protocol.Task)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_fcount();
  inline void clear_has_fcount();
  inline void set_has_finish();
  inline void clear_has_finish();
  inline void set_has_award();
  inline void clear_has_award();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 count_;
  ::std::string* content_;
  ::google::protobuf::uint32 fcount_;
  ::google::protobuf::uint32 finish_;
  ::protocol::Prop* award_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Vo_2eproto();
  friend void protobuf_AssignDesc_Vo_2eproto();
  friend void protobuf_ShutdownFile_Vo_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// ===================================================================


// ===================================================================

// Rank

// optional uint32 lv = 1;
inline bool Rank::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 Rank::lv() const {
  return lv_;
}
inline void Rank::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string uid = 2;
inline bool Rank::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rank::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rank::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rank::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& Rank::uid() const {
  return *uid_;
}
inline void Rank::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Rank::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Rank::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rank::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* Rank::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rank::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uname = 3;
inline bool Rank::has_uname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rank::set_has_uname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rank::clear_has_uname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rank::clear_uname() {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& Rank::uname() const {
  return *uname_;
}
inline void Rank::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Rank::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Rank::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rank::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  return uname_;
}
inline ::std::string* Rank::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rank::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 number = 4;
inline bool Rank::has_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rank::set_has_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rank::clear_has_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rank::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 Rank::number() const {
  return number_;
}
inline void Rank::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// optional uint32 type = 5;
inline bool Rank::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Rank::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Rank::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Rank::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Rank::type() const {
  return type_;
}
inline void Rank::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string picurl = 6;
inline bool Rank::has_picurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Rank::set_has_picurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Rank::clear_has_picurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Rank::clear_picurl() {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    picurl_->clear();
  }
  clear_has_picurl();
}
inline const ::std::string& Rank::picurl() const {
  return *picurl_;
}
inline void Rank::set_picurl(const ::std::string& value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Rank::set_picurl(const char* value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Rank::set_picurl(const char* value, size_t size) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rank::mutable_picurl() {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  return picurl_;
}
inline ::std::string* Rank::release_picurl() {
  clear_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picurl_;
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rank::set_allocated_picurl(::std::string* picurl) {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (picurl) {
    set_has_picurl();
    picurl_ = picurl;
  } else {
    clear_has_picurl();
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 picid = 7;
inline bool Rank::has_picid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Rank::set_has_picid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Rank::clear_has_picid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Rank::clear_picid() {
  picid_ = 0u;
  clear_has_picid();
}
inline ::google::protobuf::uint32 Rank::picid() const {
  return picid_;
}
inline void Rank::set_picid(::google::protobuf::uint32 value) {
  set_has_picid();
  picid_ = value;
}

// -------------------------------------------------------------------

// Prop

// required uint32 id = 1;
inline bool Prop::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Prop::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Prop::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Prop::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Prop::id() const {
  return id_;
}
inline void Prop::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Prop::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Prop::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Prop::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Prop::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Prop::name() const {
  return *name_;
}
inline void Prop::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Prop::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Prop::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Prop::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Prop::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Prop::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 number = 3;
inline bool Prop::has_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Prop::set_has_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Prop::clear_has_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Prop::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 Prop::number() const {
  return number_;
}
inline void Prop::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// ShopItem

// required uint32 id = 1;
inline bool ShopItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShopItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShopItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShopItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ShopItem::id() const {
  return id_;
}
inline void ShopItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .protocol.Prop prop = 2;
inline bool ShopItem::has_prop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShopItem::set_has_prop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShopItem::clear_has_prop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShopItem::clear_prop() {
  if (prop_ != NULL) prop_->::protocol::Prop::Clear();
  clear_has_prop();
}
inline const ::protocol::Prop& ShopItem::prop() const {
  return prop_ != NULL ? *prop_ : *default_instance_->prop_;
}
inline ::protocol::Prop* ShopItem::mutable_prop() {
  set_has_prop();
  if (prop_ == NULL) prop_ = new ::protocol::Prop;
  return prop_;
}
inline ::protocol::Prop* ShopItem::release_prop() {
  clear_has_prop();
  ::protocol::Prop* temp = prop_;
  prop_ = NULL;
  return temp;
}
inline void ShopItem::set_allocated_prop(::protocol::Prop* prop) {
  delete prop_;
  prop_ = prop;
  if (prop) {
    set_has_prop();
  } else {
    clear_has_prop();
  }
}

// optional uint32 type = 3;
inline bool ShopItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShopItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShopItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShopItem::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ShopItem::type() const {
  return type_;
}
inline void ShopItem::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 number = 4;
inline bool ShopItem::has_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShopItem::set_has_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShopItem::clear_has_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShopItem::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 ShopItem::number() const {
  return number_;
}
inline void ShopItem::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// optional uint32 givenum = 5;
inline bool ShopItem::has_givenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShopItem::set_has_givenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShopItem::clear_has_givenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShopItem::clear_givenum() {
  givenum_ = 0u;
  clear_has_givenum();
}
inline ::google::protobuf::uint32 ShopItem::givenum() const {
  return givenum_;
}
inline void ShopItem::set_givenum(::google::protobuf::uint32 value) {
  set_has_givenum();
  givenum_ = value;
}

// optional bool hot = 6;
inline bool ShopItem::has_hot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShopItem::set_has_hot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShopItem::clear_has_hot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShopItem::clear_hot() {
  hot_ = false;
  clear_has_hot();
}
inline bool ShopItem::hot() const {
  return hot_;
}
inline void ShopItem::set_hot(bool value) {
  set_has_hot();
  hot_ = value;
}

// -------------------------------------------------------------------

// Mail

// required uint32 id = 1;
inline bool Mail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mail::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Mail::id() const {
  return id_;
}
inline void Mail::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool Mail::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mail::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mail::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mail::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Mail::type() const {
  return type_;
}
inline void Mail::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string title = 3;
inline bool Mail::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mail::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mail::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Mail::title() const {
  return *title_;
}
inline void Mail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Mail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Mail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Mail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mail::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 4;
inline bool Mail::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mail::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mail::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Mail::content() const {
  return *content_;
}
inline void Mail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Mail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Mail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Mail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mail::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string time = 5;
inline bool Mail::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mail::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mail::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mail::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Mail::time() const {
  return *time_;
}
inline void Mail::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Mail::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Mail::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* Mail::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mail::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Friend

// optional .protocol.DBUserInfo userinfo = 1;
inline bool Friend::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::protocol::DBUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::protocol::DBUserInfo& Friend::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::protocol::DBUserInfo* Friend::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::protocol::DBUserInfo;
  return userinfo_;
}
inline ::protocol::DBUserInfo* Friend::release_userinfo() {
  clear_has_userinfo();
  ::protocol::DBUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void Friend::set_allocated_userinfo(::protocol::DBUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// optional bool online = 2;
inline bool Friend::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool Friend::online() const {
  return online_;
}
inline void Friend::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional bool friend = 3;
inline bool Friend::has_friend_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend::set_has_friend_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend::clear_has_friend_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend::clear_friend_() {
  friend__ = false;
  clear_has_friend_();
}
inline bool Friend::friend_() const {
  return friend__;
}
inline void Friend::set_friend_(bool value) {
  set_has_friend_();
  friend__ = value;
}

// optional uint32 acttype = 4;
inline bool Friend::has_acttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend::set_has_acttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend::clear_has_acttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend::clear_acttype() {
  acttype_ = 0u;
  clear_has_acttype();
}
inline ::google::protobuf::uint32 Friend::acttype() const {
  return acttype_;
}
inline void Friend::set_acttype(::google::protobuf::uint32 value) {
  set_has_acttype();
  acttype_ = value;
}

// optional uint32 time = 5;
inline bool Friend::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Friend::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Friend::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Friend::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 Friend::time() const {
  return time_;
}
inline void Friend::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// Active

// optional uint32 id = 1;
inline bool Active::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Active::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Active::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Active::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Active::id() const {
  return id_;
}
inline void Active::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool Active::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Active::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Active::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Active::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Active::type() const {
  return type_;
}
inline void Active::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string title = 3;
inline bool Active::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Active::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Active::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Active::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Active::title() const {
  return *title_;
}
inline void Active::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Active::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Active::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Active::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Active::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Active::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string url = 4;
inline bool Active::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Active::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Active::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Active::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Active::url() const {
  return *url_;
}
inline void Active::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Active::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Active::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Active::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Active::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Active::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Task

// optional uint32 taskid = 1;
inline bool Task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 Task::taskid() const {
  return taskid_;
}
inline void Task::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional string title = 2;
inline bool Task::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Task::title() const {
  return *title_;
}
inline void Task::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Task::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Task::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Task::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 3;
inline bool Task::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Task::content() const {
  return *content_;
}
inline void Task::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Task::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Task::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Task::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 count = 4;
inline bool Task::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Task::count() const {
  return count_;
}
inline void Task::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 fcount = 5;
inline bool Task::has_fcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_fcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_fcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_fcount() {
  fcount_ = 0u;
  clear_has_fcount();
}
inline ::google::protobuf::uint32 Task::fcount() const {
  return fcount_;
}
inline void Task::set_fcount(::google::protobuf::uint32 value) {
  set_has_fcount();
  fcount_ = value;
}

// optional uint32 finish = 6;
inline bool Task::has_finish() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_finish() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_finish() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_finish() {
  finish_ = 0u;
  clear_has_finish();
}
inline ::google::protobuf::uint32 Task::finish() const {
  return finish_;
}
inline void Task::set_finish(::google::protobuf::uint32 value) {
  set_has_finish();
  finish_ = value;
}

// optional .protocol.Prop award = 7;
inline bool Task::has_award() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_award() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_award() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_award() {
  if (award_ != NULL) award_->::protocol::Prop::Clear();
  clear_has_award();
}
inline const ::protocol::Prop& Task::award() const {
  return award_ != NULL ? *award_ : *default_instance_->award_;
}
inline ::protocol::Prop* Task::mutable_award() {
  set_has_award();
  if (award_ == NULL) award_ = new ::protocol::Prop;
  return award_;
}
inline ::protocol::Prop* Task::release_award() {
  clear_has_award();
  ::protocol::Prop* temp = award_;
  award_ = NULL;
  return temp;
}
inline void Task::set_allocated_award(::protocol::Prop* award) {
  delete award_;
  award_ = award;
  if (award) {
    set_has_award();
  } else {
    clear_has_award();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Vo_2eproto__INCLUDED

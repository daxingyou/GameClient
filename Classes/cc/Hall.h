// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hall.proto

#ifndef PROTOBUF_Hall_2eproto__INCLUDED
#define PROTOBUF_Hall_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Hall_2eproto();
void protobuf_AssignDesc_Hall_2eproto();
void protobuf_ShutdownFile_Hall_2eproto();

class Rank;

// ===================================================================

class Rank : public ::google::protobuf::Message {
 public:
  Rank();
  virtual ~Rank();

  Rank(const Rank& from);

  inline Rank& operator=(const Rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rank& default_instance();

  void Swap(Rank* other);

  // implements Message ----------------------------------------------

  Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rank& from);
  void MergeFrom(const Rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string uname = 4;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 4;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 number = 5;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // optional uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string picurl = 7;
  inline bool has_picurl() const;
  inline void clear_picurl();
  static const int kPicurlFieldNumber = 7;
  inline const ::std::string& picurl() const;
  inline void set_picurl(const ::std::string& value);
  inline void set_picurl(const char* value);
  inline void set_picurl(const char* value, size_t size);
  inline ::std::string* mutable_picurl();
  inline ::std::string* release_picurl();
  inline void set_allocated_picurl(::std::string* picurl);

  // optional uint32 picid = 8;
  inline bool has_picid() const;
  inline void clear_picid();
  static const int kPicidFieldNumber = 8;
  inline ::google::protobuf::uint32 picid() const;
  inline void set_picid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.Rank)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_picurl();
  inline void clear_has_picurl();
  inline void set_has_picid();
  inline void clear_has_picid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lv_;
  ::std::string* uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 number_;
  ::google::protobuf::uint32 type_;
  ::std::string* picurl_;
  ::google::protobuf::uint32 picid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Hall_2eproto();
  friend void protobuf_AssignDesc_Hall_2eproto();
  friend void protobuf_ShutdownFile_Hall_2eproto();

  void InitAsDefaultInstance();
  static Rank* default_instance_;
};
// ===================================================================


// ===================================================================

// Rank

// required uint32 id = 1;
inline bool Rank::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rank::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rank::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rank::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Rank::id() const {
  return id_;
}
inline void Rank::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 lv = 2;
inline bool Rank::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rank::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rank::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rank::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 Rank::lv() const {
  return lv_;
}
inline void Rank::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string uid = 3;
inline bool Rank::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rank::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rank::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rank::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& Rank::uid() const {
  return *uid_;
}
inline void Rank::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Rank::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Rank::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rank::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* Rank::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rank::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uname = 4;
inline bool Rank::has_uname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rank::set_has_uname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rank::clear_has_uname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rank::clear_uname() {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& Rank::uname() const {
  return *uname_;
}
inline void Rank::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Rank::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Rank::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rank::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  return uname_;
}
inline ::std::string* Rank::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rank::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 number = 5;
inline bool Rank::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Rank::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Rank::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Rank::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 Rank::number() const {
  return number_;
}
inline void Rank::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// optional uint32 type = 6;
inline bool Rank::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Rank::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Rank::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Rank::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Rank::type() const {
  return type_;
}
inline void Rank::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string picurl = 7;
inline bool Rank::has_picurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Rank::set_has_picurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Rank::clear_has_picurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Rank::clear_picurl() {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    picurl_->clear();
  }
  clear_has_picurl();
}
inline const ::std::string& Rank::picurl() const {
  return *picurl_;
}
inline void Rank::set_picurl(const ::std::string& value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Rank::set_picurl(const char* value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void Rank::set_picurl(const char* value, size_t size) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rank::mutable_picurl() {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  return picurl_;
}
inline ::std::string* Rank::release_picurl() {
  clear_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picurl_;
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rank::set_allocated_picurl(::std::string* picurl) {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (picurl) {
    set_has_picurl();
    picurl_ = picurl;
  } else {
    clear_has_picurl();
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 picid = 8;
inline bool Rank::has_picid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Rank::set_has_picid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Rank::clear_has_picid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Rank::clear_picid() {
  picid_ = 0u;
  clear_has_picid();
}
inline ::google::protobuf::uint32 Rank::picid() const {
  return picid_;
}
inline void Rank::set_picid(::google::protobuf::uint32 value) {
  set_has_picid();
  picid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Hall_2eproto__INCLUDED

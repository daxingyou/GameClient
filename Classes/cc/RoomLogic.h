// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomLogic.proto

#ifndef PROTOBUF_RoomLogic_2eproto__INCLUDED
#define PROTOBUF_RoomLogic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Vo.h"
#include "Room.h"
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RoomLogic_2eproto();
void protobuf_AssignDesc_RoomLogic_2eproto();
void protobuf_ShutdownFile_RoomLogic_2eproto();

class SSelectZhuang;
class CDice;
class SDice;
class SZhuangCard;
class SCard;
class CDiscard;
class SDiscard;
class SDraw;
class SOtherDraw;
class CChi;
class SChi;
class CPeng;
class SPeng;
class CMingGang;
class SMingGang;
class CAnGang;
class SAnGang;
class SFa;
class CHu;
class SHu;
class SGameover;
class SRoundOver;
class SDissolveTip;

// ===================================================================

class SSelectZhuang : public ::google::protobuf::Message {
 public:
  SSelectZhuang();
  virtual ~SSelectZhuang();

  SSelectZhuang(const SSelectZhuang& from);

  inline SSelectZhuang& operator=(const SSelectZhuang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSelectZhuang& default_instance();

  void Swap(SSelectZhuang* other);

  // implements Message ----------------------------------------------

  SSelectZhuang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSelectZhuang& from);
  void MergeFrom(const SSelectZhuang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32777];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 zhuang = 2;
  inline bool has_zhuang() const;
  inline void clear_zhuang();
  static const int kZhuangFieldNumber = 2;
  inline ::google::protobuf::uint32 zhuang() const;
  inline void set_zhuang(::google::protobuf::uint32 value);

  // optional string zuid = 3;
  inline bool has_zuid() const;
  inline void clear_zuid();
  static const int kZuidFieldNumber = 3;
  inline const ::std::string& zuid() const;
  inline void set_zuid(const ::std::string& value);
  inline void set_zuid(const char* value);
  inline void set_zuid(const char* value, size_t size);
  inline ::std::string* mutable_zuid();
  inline ::std::string* release_zuid();
  inline void set_allocated_zuid(::std::string* zuid);

  // optional bytes zdice = 4;
  inline bool has_zdice() const;
  inline void clear_zdice();
  static const int kZdiceFieldNumber = 4;
  inline const ::std::string& zdice() const;
  inline void set_zdice(const ::std::string& value);
  inline void set_zdice(const char* value);
  inline void set_zdice(const void* value, size_t size);
  inline ::std::string* mutable_zdice();
  inline ::std::string* release_zdice();
  inline void set_allocated_zdice(::std::string* zdice);

  // @@protoc_insertion_point(class_scope:protocol.SSelectZhuang)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_zhuang();
  inline void clear_has_zhuang();
  inline void set_has_zuid();
  inline void clear_has_zuid();
  inline void set_has_zdice();
  inline void clear_has_zdice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 zhuang_;
  ::std::string* zuid_;
  ::std::string* zdice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SSelectZhuang* default_instance_;
};
// -------------------------------------------------------------------

class CDice : public ::google::protobuf::Message {
 public:
  CDice();
  virtual ~CDice();

  CDice(const CDice& from);

  inline CDice& operator=(const CDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDice& default_instance();

  void Swap(CDice* other);

  // implements Message ----------------------------------------------

  CDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDice& from);
  void MergeFrom(const CDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32778];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional string uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.CDice)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static CDice* default_instance_;
};
// -------------------------------------------------------------------

class SDice : public ::google::protobuf::Message {
 public:
  SDice();
  virtual ~SDice();

  SDice(const SDice& from);

  inline SDice& operator=(const SDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SDice& default_instance();

  void Swap(SDice* other);

  // implements Message ----------------------------------------------

  SDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SDice& from);
  void MergeFrom(const SDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32778];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional bytes dice = 2;
  inline bool has_dice() const;
  inline void clear_dice();
  static const int kDiceFieldNumber = 2;
  inline const ::std::string& dice() const;
  inline void set_dice(const ::std::string& value);
  inline void set_dice(const char* value);
  inline void set_dice(const void* value, size_t size);
  inline ::std::string* mutable_dice();
  inline ::std::string* release_dice();
  inline void set_allocated_dice(::std::string* dice);

  // optional uint32 err = 3;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 3;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SDice)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_dice();
  inline void clear_has_dice();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dice_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SDice* default_instance_;
};
// -------------------------------------------------------------------

class SZhuangCard : public ::google::protobuf::Message {
 public:
  SZhuangCard();
  virtual ~SZhuangCard();

  SZhuangCard(const SZhuangCard& from);

  inline SZhuangCard& operator=(const SZhuangCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SZhuangCard& default_instance();

  void Swap(SZhuangCard* other);

  // implements Message ----------------------------------------------

  SZhuangCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SZhuangCard& from);
  void MergeFrom(const SZhuangCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32779];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional bytes cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::std::string& cards() const;
  inline void set_cards(const ::std::string& value);
  inline void set_cards(const char* value);
  inline void set_cards(const void* value, size_t size);
  inline ::std::string* mutable_cards();
  inline ::std::string* release_cards();
  inline void set_allocated_cards(::std::string* cards);

  // optional uint32 hu = 3;
  inline bool has_hu() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 3;
  inline ::google::protobuf::uint32 hu() const;
  inline void set_hu(::google::protobuf::uint32 value);

  // repeated .protocol.CPGCardData gang = 4;
  inline int gang_size() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 4;
  inline const ::protocol::CPGCardData& gang(int index) const;
  inline ::protocol::CPGCardData* mutable_gang(int index);
  inline ::protocol::CPGCardData* add_gang();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >&
      gang() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >*
      mutable_gang();

  // optional .protocol.TingCard ting = 5;
  inline bool has_ting() const;
  inline void clear_ting();
  static const int kTingFieldNumber = 5;
  inline const ::protocol::TingCard& ting() const;
  inline ::protocol::TingCard* mutable_ting();
  inline ::protocol::TingCard* release_ting();
  inline void set_allocated_ting(::protocol::TingCard* ting);

  // optional string uid = 6;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 6;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.SZhuangCard)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_hu();
  inline void clear_has_hu();
  inline void set_has_ting();
  inline void clear_has_ting();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cards_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 hu_;
  ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData > gang_;
  ::protocol::TingCard* ting_;
  ::std::string* uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SZhuangCard* default_instance_;
};
// -------------------------------------------------------------------

class SCard : public ::google::protobuf::Message {
 public:
  SCard();
  virtual ~SCard();

  SCard(const SCard& from);

  inline SCard& operator=(const SCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCard& default_instance();

  void Swap(SCard* other);

  // implements Message ----------------------------------------------

  SCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCard& from);
  void MergeFrom(const SCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32779];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional bytes cards = 2;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::std::string& cards() const;
  inline void set_cards(const ::std::string& value);
  inline void set_cards(const char* value);
  inline void set_cards(const void* value, size_t size);
  inline ::std::string* mutable_cards();
  inline ::std::string* release_cards();
  inline void set_allocated_cards(::std::string* cards);

  // optional string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.SCard)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cards_;
  ::std::string* uid_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SCard* default_instance_;
};
// -------------------------------------------------------------------

class CDiscard : public ::google::protobuf::Message {
 public:
  CDiscard();
  virtual ~CDiscard();

  CDiscard(const CDiscard& from);

  inline CDiscard& operator=(const CDiscard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDiscard& default_instance();

  void Swap(CDiscard* other);

  // implements Message ----------------------------------------------

  CDiscard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDiscard& from);
  void MergeFrom(const CDiscard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32780];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.CDiscard)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static CDiscard* default_instance_;
};
// -------------------------------------------------------------------

class SDiscard : public ::google::protobuf::Message {
 public:
  SDiscard();
  virtual ~SDiscard();

  SDiscard(const SDiscard& from);

  inline SDiscard& operator=(const SDiscard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SDiscard& default_instance();

  void Swap(SDiscard* other);

  // implements Message ----------------------------------------------

  SDiscard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SDiscard& from);
  void MergeFrom(const SDiscard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32780];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional uint32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // repeated .protocol.CPGCardData cpg = 5;
  inline int cpg_size() const;
  inline void clear_cpg();
  static const int kCpgFieldNumber = 5;
  inline const ::protocol::CPGCardData& cpg(int index) const;
  inline ::protocol::CPGCardData* mutable_cpg(int index);
  inline ::protocol::CPGCardData* add_cpg();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >&
      cpg() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >*
      mutable_cpg();

  // optional uint32 hu = 6;
  inline bool has_hu() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 6;
  inline ::google::protobuf::uint32 hu() const;
  inline void set_hu(::google::protobuf::uint32 value);

  // optional bytes ting = 7;
  inline bool has_ting() const;
  inline void clear_ting();
  static const int kTingFieldNumber = 7;
  inline const ::std::string& ting() const;
  inline void set_ting(const ::std::string& value);
  inline void set_ting(const char* value);
  inline void set_ting(const void* value, size_t size);
  inline ::std::string* mutable_ting();
  inline ::std::string* release_ting();
  inline void set_allocated_ting(::std::string* ting);

  // optional uint32 err = 8;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 8;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SDiscard)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_hu();
  inline void clear_has_hu();
  inline void set_has_ting();
  inline void clear_has_ting();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 hu_;
  ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData > cpg_;
  ::std::string* ting_;
  ::google::protobuf::uint32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SDiscard* default_instance_;
};
// -------------------------------------------------------------------

class SDraw : public ::google::protobuf::Message {
 public:
  SDraw();
  virtual ~SDraw();

  SDraw(const SDraw& from);

  inline SDraw& operator=(const SDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SDraw& default_instance();

  void Swap(SDraw* other);

  // implements Message ----------------------------------------------

  SDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SDraw& from);
  void MergeFrom(const SDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32781];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // repeated .protocol.CPGCardData cpg = 3;
  inline int cpg_size() const;
  inline void clear_cpg();
  static const int kCpgFieldNumber = 3;
  inline const ::protocol::CPGCardData& cpg(int index) const;
  inline ::protocol::CPGCardData* mutable_cpg(int index);
  inline ::protocol::CPGCardData* add_cpg();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >&
      cpg() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >*
      mutable_cpg();

  // optional uint32 hu = 4;
  inline bool has_hu() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 4;
  inline ::google::protobuf::uint32 hu() const;
  inline void set_hu(::google::protobuf::uint32 value);

  // optional bytes ting = 5;
  inline bool has_ting() const;
  inline void clear_ting();
  static const int kTingFieldNumber = 5;
  inline const ::std::string& ting() const;
  inline void set_ting(const ::std::string& value);
  inline void set_ting(const char* value);
  inline void set_ting(const void* value, size_t size);
  inline ::std::string* mutable_ting();
  inline ::std::string* release_ting();
  inline void set_allocated_ting(::std::string* ting);

  // optional bool gang = 6;
  inline bool has_gang() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 6;
  inline bool gang() const;
  inline void set_gang(bool value);

  // optional string uid = 7;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 7;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 pos = 8;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 8;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SDraw)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_hu();
  inline void clear_has_hu();
  inline void set_has_ting();
  inline void clear_has_ting();
  inline void set_has_gang();
  inline void clear_has_gang();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData > cpg_;
  ::std::string* ting_;
  ::google::protobuf::uint32 hu_;
  bool gang_;
  ::std::string* uid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SDraw* default_instance_;
};
// -------------------------------------------------------------------

class SOtherDraw : public ::google::protobuf::Message {
 public:
  SOtherDraw();
  virtual ~SOtherDraw();

  SOtherDraw(const SOtherDraw& from);

  inline SOtherDraw& operator=(const SOtherDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SOtherDraw& default_instance();

  void Swap(SOtherDraw* other);

  // implements Message ----------------------------------------------

  SOtherDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SOtherDraw& from);
  void MergeFrom(const SOtherDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32782];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.SOtherDraw)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SOtherDraw* default_instance_;
};
// -------------------------------------------------------------------

class CChi : public ::google::protobuf::Message {
 public:
  CChi();
  virtual ~CChi();

  CChi(const CChi& from);

  inline CChi& operator=(const CChi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CChi& default_instance();

  void Swap(CChi* other);

  // implements Message ----------------------------------------------

  CChi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CChi& from);
  void MergeFrom(const CChi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32784];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional bytes card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline const ::std::string& card() const;
  inline void set_card(const ::std::string& value);
  inline void set_card(const char* value);
  inline void set_card(const void* value, size_t size);
  inline ::std::string* mutable_card();
  inline ::std::string* release_card();
  inline void set_allocated_card(::std::string* card);

  // optional string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.CChi)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static CChi* default_instance_;
};
// -------------------------------------------------------------------

class SChi : public ::google::protobuf::Message {
 public:
  SChi();
  virtual ~SChi();

  SChi(const SChi& from);

  inline SChi& operator=(const SChi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SChi& default_instance();

  void Swap(SChi* other);

  // implements Message ----------------------------------------------

  SChi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SChi& from);
  void MergeFrom(const SChi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32784];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional bytes card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline const ::std::string& card() const;
  inline void set_card(const ::std::string& value);
  inline void set_card(const char* value);
  inline void set_card(const void* value, size_t size);
  inline ::std::string* mutable_card();
  inline ::std::string* release_card();
  inline void set_allocated_card(::std::string* card);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 err = 5;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 5;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SChi)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* card_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 pos_;
  ::std::string* uid_;
  ::google::protobuf::uint32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SChi* default_instance_;
};
// -------------------------------------------------------------------

class CPeng : public ::google::protobuf::Message {
 public:
  CPeng();
  virtual ~CPeng();

  CPeng(const CPeng& from);

  inline CPeng& operator=(const CPeng& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPeng& default_instance();

  void Swap(CPeng* other);

  // implements Message ----------------------------------------------

  CPeng* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPeng& from);
  void MergeFrom(const CPeng& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32785];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.CPeng)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static CPeng* default_instance_;
};
// -------------------------------------------------------------------

class SPeng : public ::google::protobuf::Message {
 public:
  SPeng();
  virtual ~SPeng();

  SPeng(const SPeng& from);

  inline SPeng& operator=(const SPeng& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPeng& default_instance();

  void Swap(SPeng* other);

  // implements Message ----------------------------------------------

  SPeng* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPeng& from);
  void MergeFrom(const SPeng& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32785];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 err = 5;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 5;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SPeng)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SPeng* default_instance_;
};
// -------------------------------------------------------------------

class CMingGang : public ::google::protobuf::Message {
 public:
  CMingGang();
  virtual ~CMingGang();

  CMingGang(const CMingGang& from);

  inline CMingGang& operator=(const CMingGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMingGang& default_instance();

  void Swap(CMingGang* other);

  // implements Message ----------------------------------------------

  CMingGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMingGang& from);
  void MergeFrom(const CMingGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32786];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.CMingGang)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static CMingGang* default_instance_;
};
// -------------------------------------------------------------------

class SMingGang : public ::google::protobuf::Message {
 public:
  SMingGang();
  virtual ~SMingGang();

  SMingGang(const SMingGang& from);

  inline SMingGang& operator=(const SMingGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SMingGang& default_instance();

  void Swap(SMingGang* other);

  // implements Message ----------------------------------------------

  SMingGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMingGang& from);
  void MergeFrom(const SMingGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32786];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 hu = 6;
  inline bool has_hu() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 6;
  inline ::google::protobuf::uint32 hu() const;
  inline void set_hu(::google::protobuf::uint32 value);

  // optional uint32 err = 7;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 7;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SMingGang)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_hu();
  inline void clear_has_hu();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 hu_;
  ::google::protobuf::uint32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SMingGang* default_instance_;
};
// -------------------------------------------------------------------

class CAnGang : public ::google::protobuf::Message {
 public:
  CAnGang();
  virtual ~CAnGang();

  CAnGang(const CAnGang& from);

  inline CAnGang& operator=(const CAnGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAnGang& default_instance();

  void Swap(CAnGang* other);

  // implements Message ----------------------------------------------

  CAnGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAnGang& from);
  void MergeFrom(const CAnGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32787];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.CAnGang)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static CAnGang* default_instance_;
};
// -------------------------------------------------------------------

class SAnGang : public ::google::protobuf::Message {
 public:
  SAnGang();
  virtual ~SAnGang();

  SAnGang(const SAnGang& from);

  inline SAnGang& operator=(const SAnGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SAnGang& default_instance();

  void Swap(SAnGang* other);

  // implements Message ----------------------------------------------

  SAnGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SAnGang& from);
  void MergeFrom(const SAnGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32787];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 err = 6;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 6;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SAnGang)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 card_;
  ::std::string* uid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SAnGang* default_instance_;
};
// -------------------------------------------------------------------

class SFa : public ::google::protobuf::Message {
 public:
  SFa();
  virtual ~SFa();

  SFa(const SFa& from);

  inline SFa& operator=(const SFa& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SFa& default_instance();

  void Swap(SFa* other);

  // implements Message ----------------------------------------------

  SFa* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SFa& from);
  void MergeFrom(const SFa& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32788];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.SFa)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 pos_;
  ::std::string* uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SFa* default_instance_;
};
// -------------------------------------------------------------------

class CHu : public ::google::protobuf::Message {
 public:
  CHu();
  virtual ~CHu();

  CHu(const CHu& from);

  inline CHu& operator=(const CHu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CHu& default_instance();

  void Swap(CHu* other);

  // implements Message ----------------------------------------------

  CHu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CHu& from);
  void MergeFrom(const CHu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32789];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional string uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.CHu)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static CHu* default_instance_;
};
// -------------------------------------------------------------------

class SHu : public ::google::protobuf::Message {
 public:
  SHu();
  virtual ~SHu();

  SHu(const SHu& from);

  inline SHu& operator=(const SHu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SHu& default_instance();

  void Swap(SHu* other);

  // implements Message ----------------------------------------------

  SHu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SHu& from);
  void MergeFrom(const SHu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32789];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional uint32 hu = 4;
  inline bool has_hu() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 4;
  inline ::google::protobuf::uint32 hu() const;
  inline void set_hu(::google::protobuf::uint32 value);

  // optional uint32 err = 5;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 5;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.SHu)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_hu();
  inline void clear_has_hu();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 pos_;
  ::std::string* uid_;
  ::google::protobuf::uint32 hu_;
  ::google::protobuf::uint32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SHu* default_instance_;
};
// -------------------------------------------------------------------

class SGameover : public ::google::protobuf::Message {
 public:
  SGameover();
  virtual ~SGameover();

  SGameover(const SGameover& from);

  inline SGameover& operator=(const SGameover& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGameover& default_instance();

  void Swap(SGameover* other);

  // implements Message ----------------------------------------------

  SGameover* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGameover& from);
  void MergeFrom(const SGameover& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32790];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 hu = 2;
  inline bool has_hu() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 2;
  inline ::google::protobuf::uint32 hu() const;
  inline void set_hu(::google::protobuf::uint32 value);

  // optional string huuid = 3;
  inline bool has_huuid() const;
  inline void clear_huuid();
  static const int kHuuidFieldNumber = 3;
  inline const ::std::string& huuid() const;
  inline void set_huuid(const ::std::string& value);
  inline void set_huuid(const char* value);
  inline void set_huuid(const char* value, size_t size);
  inline ::std::string* mutable_huuid();
  inline ::std::string* release_huuid();
  inline void set_allocated_huuid(::std::string* huuid);

  // optional string beiuid = 4;
  inline bool has_beiuid() const;
  inline void clear_beiuid();
  static const int kBeiuidFieldNumber = 4;
  inline const ::std::string& beiuid() const;
  inline void set_beiuid(const ::std::string& value);
  inline void set_beiuid(const char* value);
  inline void set_beiuid(const char* value, size_t size);
  inline ::std::string* mutable_beiuid();
  inline ::std::string* release_beiuid();
  inline void set_allocated_beiuid(::std::string* beiuid);

  // optional uint32 pao = 5;
  inline bool has_pao() const;
  inline void clear_pao();
  static const int kPaoFieldNumber = 5;
  inline ::google::protobuf::uint32 pao() const;
  inline void set_pao(::google::protobuf::uint32 value);

  // optional uint32 score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .protocol.UserOver info = 7;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 7;
  inline const ::protocol::UserOver& info(int index) const;
  inline ::protocol::UserOver* mutable_info(int index);
  inline ::protocol::UserOver* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::UserOver >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::UserOver >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:protocol.SGameover)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_hu();
  inline void clear_has_hu();
  inline void set_has_huuid();
  inline void clear_has_huuid();
  inline void set_has_beiuid();
  inline void clear_has_beiuid();
  inline void set_has_pao();
  inline void clear_has_pao();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 hu_;
  ::std::string* huuid_;
  ::std::string* beiuid_;
  ::google::protobuf::uint32 pao_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::RepeatedPtrField< ::protocol::UserOver > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SGameover* default_instance_;
};
// -------------------------------------------------------------------

class SRoundOver : public ::google::protobuf::Message {
 public:
  SRoundOver();
  virtual ~SRoundOver();

  SRoundOver(const SRoundOver& from);

  inline SRoundOver& operator=(const SRoundOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRoundOver& default_instance();

  void Swap(SRoundOver* other);

  // implements Message ----------------------------------------------

  SRoundOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRoundOver& from);
  void MergeFrom(const SRoundOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32791];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 round = 2;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 2;
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional uint32 ante = 3;
  inline bool has_ante() const;
  inline void clear_ante();
  static const int kAnteFieldNumber = 3;
  inline ::google::protobuf::uint32 ante() const;
  inline void set_ante(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // repeated .protocol.UserRound info = 6;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::protocol::UserRound& info(int index) const;
  inline ::protocol::UserRound* mutable_info(int index);
  inline ::protocol::UserRound* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::UserRound >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::UserRound >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:protocol.SRoundOver)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_ante();
  inline void clear_has_ante();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 round_;
  ::std::string* uid_;
  ::std::string* time_;
  ::google::protobuf::RepeatedPtrField< ::protocol::UserRound > info_;
  ::google::protobuf::uint32 ante_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SRoundOver* default_instance_;
};
// -------------------------------------------------------------------

class SDissolveTip : public ::google::protobuf::Message {
 public:
  SDissolveTip();
  virtual ~SDissolveTip();

  SDissolveTip(const SDissolveTip& from);

  inline SDissolveTip& operator=(const SDissolveTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SDissolveTip& default_instance();

  void Swap(SDissolveTip* other);

  // implements Message ----------------------------------------------

  SDissolveTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SDissolveTip& from);
  void MergeFrom(const SDissolveTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd = 1 [default = 32792];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:protocol.SDissolveTip)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 time_;
  ::std::string* uid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RoomLogic_2eproto();
  friend void protobuf_AssignDesc_RoomLogic_2eproto();
  friend void protobuf_ShutdownFile_RoomLogic_2eproto();

  void InitAsDefaultInstance();
  static SDissolveTip* default_instance_;
};
// ===================================================================


// ===================================================================

// SSelectZhuang

// optional uint32 cmd = 1 [default = 32777];
inline bool SSelectZhuang::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSelectZhuang::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSelectZhuang::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSelectZhuang::clear_cmd() {
  cmd_ = 32777u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SSelectZhuang::cmd() const {
  return cmd_;
}
inline void SSelectZhuang::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 zhuang = 2;
inline bool SSelectZhuang::has_zhuang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSelectZhuang::set_has_zhuang() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSelectZhuang::clear_has_zhuang() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSelectZhuang::clear_zhuang() {
  zhuang_ = 0u;
  clear_has_zhuang();
}
inline ::google::protobuf::uint32 SSelectZhuang::zhuang() const {
  return zhuang_;
}
inline void SSelectZhuang::set_zhuang(::google::protobuf::uint32 value) {
  set_has_zhuang();
  zhuang_ = value;
}

// optional string zuid = 3;
inline bool SSelectZhuang::has_zuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSelectZhuang::set_has_zuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSelectZhuang::clear_has_zuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSelectZhuang::clear_zuid() {
  if (zuid_ != &::google::protobuf::internal::kEmptyString) {
    zuid_->clear();
  }
  clear_has_zuid();
}
inline const ::std::string& SSelectZhuang::zuid() const {
  return *zuid_;
}
inline void SSelectZhuang::set_zuid(const ::std::string& value) {
  set_has_zuid();
  if (zuid_ == &::google::protobuf::internal::kEmptyString) {
    zuid_ = new ::std::string;
  }
  zuid_->assign(value);
}
inline void SSelectZhuang::set_zuid(const char* value) {
  set_has_zuid();
  if (zuid_ == &::google::protobuf::internal::kEmptyString) {
    zuid_ = new ::std::string;
  }
  zuid_->assign(value);
}
inline void SSelectZhuang::set_zuid(const char* value, size_t size) {
  set_has_zuid();
  if (zuid_ == &::google::protobuf::internal::kEmptyString) {
    zuid_ = new ::std::string;
  }
  zuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSelectZhuang::mutable_zuid() {
  set_has_zuid();
  if (zuid_ == &::google::protobuf::internal::kEmptyString) {
    zuid_ = new ::std::string;
  }
  return zuid_;
}
inline ::std::string* SSelectZhuang::release_zuid() {
  clear_has_zuid();
  if (zuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zuid_;
    zuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSelectZhuang::set_allocated_zuid(::std::string* zuid) {
  if (zuid_ != &::google::protobuf::internal::kEmptyString) {
    delete zuid_;
  }
  if (zuid) {
    set_has_zuid();
    zuid_ = zuid;
  } else {
    clear_has_zuid();
    zuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes zdice = 4;
inline bool SSelectZhuang::has_zdice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSelectZhuang::set_has_zdice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSelectZhuang::clear_has_zdice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSelectZhuang::clear_zdice() {
  if (zdice_ != &::google::protobuf::internal::kEmptyString) {
    zdice_->clear();
  }
  clear_has_zdice();
}
inline const ::std::string& SSelectZhuang::zdice() const {
  return *zdice_;
}
inline void SSelectZhuang::set_zdice(const ::std::string& value) {
  set_has_zdice();
  if (zdice_ == &::google::protobuf::internal::kEmptyString) {
    zdice_ = new ::std::string;
  }
  zdice_->assign(value);
}
inline void SSelectZhuang::set_zdice(const char* value) {
  set_has_zdice();
  if (zdice_ == &::google::protobuf::internal::kEmptyString) {
    zdice_ = new ::std::string;
  }
  zdice_->assign(value);
}
inline void SSelectZhuang::set_zdice(const void* value, size_t size) {
  set_has_zdice();
  if (zdice_ == &::google::protobuf::internal::kEmptyString) {
    zdice_ = new ::std::string;
  }
  zdice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SSelectZhuang::mutable_zdice() {
  set_has_zdice();
  if (zdice_ == &::google::protobuf::internal::kEmptyString) {
    zdice_ = new ::std::string;
  }
  return zdice_;
}
inline ::std::string* SSelectZhuang::release_zdice() {
  clear_has_zdice();
  if (zdice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zdice_;
    zdice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SSelectZhuang::set_allocated_zdice(::std::string* zdice) {
  if (zdice_ != &::google::protobuf::internal::kEmptyString) {
    delete zdice_;
  }
  if (zdice) {
    set_has_zdice();
    zdice_ = zdice;
  } else {
    clear_has_zdice();
    zdice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CDice

// optional uint32 cmd = 1 [default = 32778];
inline bool CDice::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDice::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDice::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDice::clear_cmd() {
  cmd_ = 32778u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CDice::cmd() const {
  return cmd_;
}
inline void CDice::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional string uid = 2;
inline bool CDice::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDice::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDice::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDice::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CDice::uid() const {
  return *uid_;
}
inline void CDice::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CDice::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CDice::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDice::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CDice::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CDice::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SDice

// optional uint32 cmd = 1 [default = 32778];
inline bool SDice::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SDice::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SDice::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SDice::clear_cmd() {
  cmd_ = 32778u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SDice::cmd() const {
  return cmd_;
}
inline void SDice::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional bytes dice = 2;
inline bool SDice::has_dice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SDice::set_has_dice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SDice::clear_has_dice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SDice::clear_dice() {
  if (dice_ != &::google::protobuf::internal::kEmptyString) {
    dice_->clear();
  }
  clear_has_dice();
}
inline const ::std::string& SDice::dice() const {
  return *dice_;
}
inline void SDice::set_dice(const ::std::string& value) {
  set_has_dice();
  if (dice_ == &::google::protobuf::internal::kEmptyString) {
    dice_ = new ::std::string;
  }
  dice_->assign(value);
}
inline void SDice::set_dice(const char* value) {
  set_has_dice();
  if (dice_ == &::google::protobuf::internal::kEmptyString) {
    dice_ = new ::std::string;
  }
  dice_->assign(value);
}
inline void SDice::set_dice(const void* value, size_t size) {
  set_has_dice();
  if (dice_ == &::google::protobuf::internal::kEmptyString) {
    dice_ = new ::std::string;
  }
  dice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SDice::mutable_dice() {
  set_has_dice();
  if (dice_ == &::google::protobuf::internal::kEmptyString) {
    dice_ = new ::std::string;
  }
  return dice_;
}
inline ::std::string* SDice::release_dice() {
  clear_has_dice();
  if (dice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dice_;
    dice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SDice::set_allocated_dice(::std::string* dice) {
  if (dice_ != &::google::protobuf::internal::kEmptyString) {
    delete dice_;
  }
  if (dice) {
    set_has_dice();
    dice_ = dice;
  } else {
    clear_has_dice();
    dice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 err = 3;
inline bool SDice::has_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SDice::set_has_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SDice::clear_has_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SDice::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 SDice::err() const {
  return err_;
}
inline void SDice::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// SZhuangCard

// optional uint32 cmd = 1 [default = 32779];
inline bool SZhuangCard::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SZhuangCard::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SZhuangCard::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SZhuangCard::clear_cmd() {
  cmd_ = 32779u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SZhuangCard::cmd() const {
  return cmd_;
}
inline void SZhuangCard::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional bytes cards = 2;
inline bool SZhuangCard::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SZhuangCard::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SZhuangCard::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SZhuangCard::clear_cards() {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    cards_->clear();
  }
  clear_has_cards();
}
inline const ::std::string& SZhuangCard::cards() const {
  return *cards_;
}
inline void SZhuangCard::set_cards(const ::std::string& value) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(value);
}
inline void SZhuangCard::set_cards(const char* value) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(value);
}
inline void SZhuangCard::set_cards(const void* value, size_t size) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SZhuangCard::mutable_cards() {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  return cards_;
}
inline ::std::string* SZhuangCard::release_cards() {
  clear_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cards_;
    cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SZhuangCard::set_allocated_cards(::std::string* cards) {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    delete cards_;
  }
  if (cards) {
    set_has_cards();
    cards_ = cards;
  } else {
    clear_has_cards();
    cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 hu = 3;
inline bool SZhuangCard::has_hu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SZhuangCard::set_has_hu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SZhuangCard::clear_has_hu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SZhuangCard::clear_hu() {
  hu_ = 0u;
  clear_has_hu();
}
inline ::google::protobuf::uint32 SZhuangCard::hu() const {
  return hu_;
}
inline void SZhuangCard::set_hu(::google::protobuf::uint32 value) {
  set_has_hu();
  hu_ = value;
}

// repeated .protocol.CPGCardData gang = 4;
inline int SZhuangCard::gang_size() const {
  return gang_.size();
}
inline void SZhuangCard::clear_gang() {
  gang_.Clear();
}
inline const ::protocol::CPGCardData& SZhuangCard::gang(int index) const {
  return gang_.Get(index);
}
inline ::protocol::CPGCardData* SZhuangCard::mutable_gang(int index) {
  return gang_.Mutable(index);
}
inline ::protocol::CPGCardData* SZhuangCard::add_gang() {
  return gang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >&
SZhuangCard::gang() const {
  return gang_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >*
SZhuangCard::mutable_gang() {
  return &gang_;
}

// optional .protocol.TingCard ting = 5;
inline bool SZhuangCard::has_ting() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SZhuangCard::set_has_ting() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SZhuangCard::clear_has_ting() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SZhuangCard::clear_ting() {
  if (ting_ != NULL) ting_->::protocol::TingCard::Clear();
  clear_has_ting();
}
inline const ::protocol::TingCard& SZhuangCard::ting() const {
  return ting_ != NULL ? *ting_ : *default_instance_->ting_;
}
inline ::protocol::TingCard* SZhuangCard::mutable_ting() {
  set_has_ting();
  if (ting_ == NULL) ting_ = new ::protocol::TingCard;
  return ting_;
}
inline ::protocol::TingCard* SZhuangCard::release_ting() {
  clear_has_ting();
  ::protocol::TingCard* temp = ting_;
  ting_ = NULL;
  return temp;
}
inline void SZhuangCard::set_allocated_ting(::protocol::TingCard* ting) {
  delete ting_;
  ting_ = ting;
  if (ting) {
    set_has_ting();
  } else {
    clear_has_ting();
  }
}

// optional string uid = 6;
inline bool SZhuangCard::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SZhuangCard::set_has_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SZhuangCard::clear_has_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SZhuangCard::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SZhuangCard::uid() const {
  return *uid_;
}
inline void SZhuangCard::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SZhuangCard::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SZhuangCard::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SZhuangCard::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SZhuangCard::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SZhuangCard::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCard

// optional uint32 cmd = 1 [default = 32779];
inline bool SCard::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCard::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCard::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCard::clear_cmd() {
  cmd_ = 32779u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SCard::cmd() const {
  return cmd_;
}
inline void SCard::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional bytes cards = 2;
inline bool SCard::has_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCard::set_has_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCard::clear_has_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCard::clear_cards() {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    cards_->clear();
  }
  clear_has_cards();
}
inline const ::std::string& SCard::cards() const {
  return *cards_;
}
inline void SCard::set_cards(const ::std::string& value) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(value);
}
inline void SCard::set_cards(const char* value) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(value);
}
inline void SCard::set_cards(const void* value, size_t size) {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  cards_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCard::mutable_cards() {
  set_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    cards_ = new ::std::string;
  }
  return cards_;
}
inline ::std::string* SCard::release_cards() {
  clear_has_cards();
  if (cards_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cards_;
    cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCard::set_allocated_cards(::std::string* cards) {
  if (cards_ != &::google::protobuf::internal::kEmptyString) {
    delete cards_;
  }
  if (cards) {
    set_has_cards();
    cards_ = cards;
  } else {
    clear_has_cards();
    cards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uid = 3;
inline bool SCard::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCard::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCard::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCard::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SCard::uid() const {
  return *uid_;
}
inline void SCard::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SCard::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SCard::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCard::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SCard::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCard::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CDiscard

// optional uint32 cmd = 1 [default = 32780];
inline bool CDiscard::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDiscard::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDiscard::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDiscard::clear_cmd() {
  cmd_ = 32780u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CDiscard::cmd() const {
  return cmd_;
}
inline void CDiscard::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool CDiscard::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDiscard::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDiscard::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDiscard::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 CDiscard::card() const {
  return card_;
}
inline void CDiscard::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional string uid = 3;
inline bool CDiscard::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDiscard::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDiscard::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDiscard::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CDiscard::uid() const {
  return *uid_;
}
inline void CDiscard::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CDiscard::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CDiscard::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDiscard::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CDiscard::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CDiscard::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SDiscard

// optional uint32 cmd = 1 [default = 32780];
inline bool SDiscard::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SDiscard::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SDiscard::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SDiscard::clear_cmd() {
  cmd_ = 32780u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SDiscard::cmd() const {
  return cmd_;
}
inline void SDiscard::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool SDiscard::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SDiscard::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SDiscard::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SDiscard::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 SDiscard::card() const {
  return card_;
}
inline void SDiscard::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional uint32 position = 3;
inline bool SDiscard::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SDiscard::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SDiscard::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SDiscard::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 SDiscard::position() const {
  return position_;
}
inline void SDiscard::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional string uid = 4;
inline bool SDiscard::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SDiscard::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SDiscard::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SDiscard::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SDiscard::uid() const {
  return *uid_;
}
inline void SDiscard::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SDiscard::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SDiscard::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SDiscard::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SDiscard::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SDiscard::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protocol.CPGCardData cpg = 5;
inline int SDiscard::cpg_size() const {
  return cpg_.size();
}
inline void SDiscard::clear_cpg() {
  cpg_.Clear();
}
inline const ::protocol::CPGCardData& SDiscard::cpg(int index) const {
  return cpg_.Get(index);
}
inline ::protocol::CPGCardData* SDiscard::mutable_cpg(int index) {
  return cpg_.Mutable(index);
}
inline ::protocol::CPGCardData* SDiscard::add_cpg() {
  return cpg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >&
SDiscard::cpg() const {
  return cpg_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >*
SDiscard::mutable_cpg() {
  return &cpg_;
}

// optional uint32 hu = 6;
inline bool SDiscard::has_hu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SDiscard::set_has_hu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SDiscard::clear_has_hu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SDiscard::clear_hu() {
  hu_ = 0u;
  clear_has_hu();
}
inline ::google::protobuf::uint32 SDiscard::hu() const {
  return hu_;
}
inline void SDiscard::set_hu(::google::protobuf::uint32 value) {
  set_has_hu();
  hu_ = value;
}

// optional bytes ting = 7;
inline bool SDiscard::has_ting() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SDiscard::set_has_ting() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SDiscard::clear_has_ting() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SDiscard::clear_ting() {
  if (ting_ != &::google::protobuf::internal::kEmptyString) {
    ting_->clear();
  }
  clear_has_ting();
}
inline const ::std::string& SDiscard::ting() const {
  return *ting_;
}
inline void SDiscard::set_ting(const ::std::string& value) {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  ting_->assign(value);
}
inline void SDiscard::set_ting(const char* value) {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  ting_->assign(value);
}
inline void SDiscard::set_ting(const void* value, size_t size) {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  ting_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SDiscard::mutable_ting() {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  return ting_;
}
inline ::std::string* SDiscard::release_ting() {
  clear_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ting_;
    ting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SDiscard::set_allocated_ting(::std::string* ting) {
  if (ting_ != &::google::protobuf::internal::kEmptyString) {
    delete ting_;
  }
  if (ting) {
    set_has_ting();
    ting_ = ting;
  } else {
    clear_has_ting();
    ting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 err = 8;
inline bool SDiscard::has_err() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SDiscard::set_has_err() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SDiscard::clear_has_err() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SDiscard::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 SDiscard::err() const {
  return err_;
}
inline void SDiscard::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// SDraw

// optional uint32 cmd = 1 [default = 32781];
inline bool SDraw::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SDraw::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SDraw::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SDraw::clear_cmd() {
  cmd_ = 32781u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SDraw::cmd() const {
  return cmd_;
}
inline void SDraw::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool SDraw::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SDraw::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SDraw::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SDraw::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 SDraw::card() const {
  return card_;
}
inline void SDraw::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// repeated .protocol.CPGCardData cpg = 3;
inline int SDraw::cpg_size() const {
  return cpg_.size();
}
inline void SDraw::clear_cpg() {
  cpg_.Clear();
}
inline const ::protocol::CPGCardData& SDraw::cpg(int index) const {
  return cpg_.Get(index);
}
inline ::protocol::CPGCardData* SDraw::mutable_cpg(int index) {
  return cpg_.Mutable(index);
}
inline ::protocol::CPGCardData* SDraw::add_cpg() {
  return cpg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >&
SDraw::cpg() const {
  return cpg_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::CPGCardData >*
SDraw::mutable_cpg() {
  return &cpg_;
}

// optional uint32 hu = 4;
inline bool SDraw::has_hu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SDraw::set_has_hu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SDraw::clear_has_hu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SDraw::clear_hu() {
  hu_ = 0u;
  clear_has_hu();
}
inline ::google::protobuf::uint32 SDraw::hu() const {
  return hu_;
}
inline void SDraw::set_hu(::google::protobuf::uint32 value) {
  set_has_hu();
  hu_ = value;
}

// optional bytes ting = 5;
inline bool SDraw::has_ting() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SDraw::set_has_ting() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SDraw::clear_has_ting() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SDraw::clear_ting() {
  if (ting_ != &::google::protobuf::internal::kEmptyString) {
    ting_->clear();
  }
  clear_has_ting();
}
inline const ::std::string& SDraw::ting() const {
  return *ting_;
}
inline void SDraw::set_ting(const ::std::string& value) {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  ting_->assign(value);
}
inline void SDraw::set_ting(const char* value) {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  ting_->assign(value);
}
inline void SDraw::set_ting(const void* value, size_t size) {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  ting_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SDraw::mutable_ting() {
  set_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    ting_ = new ::std::string;
  }
  return ting_;
}
inline ::std::string* SDraw::release_ting() {
  clear_has_ting();
  if (ting_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ting_;
    ting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SDraw::set_allocated_ting(::std::string* ting) {
  if (ting_ != &::google::protobuf::internal::kEmptyString) {
    delete ting_;
  }
  if (ting) {
    set_has_ting();
    ting_ = ting;
  } else {
    clear_has_ting();
    ting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool gang = 6;
inline bool SDraw::has_gang() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SDraw::set_has_gang() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SDraw::clear_has_gang() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SDraw::clear_gang() {
  gang_ = false;
  clear_has_gang();
}
inline bool SDraw::gang() const {
  return gang_;
}
inline void SDraw::set_gang(bool value) {
  set_has_gang();
  gang_ = value;
}

// optional string uid = 7;
inline bool SDraw::has_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SDraw::set_has_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SDraw::clear_has_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SDraw::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SDraw::uid() const {
  return *uid_;
}
inline void SDraw::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SDraw::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SDraw::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SDraw::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SDraw::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SDraw::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pos = 8;
inline bool SDraw::has_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SDraw::set_has_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SDraw::clear_has_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SDraw::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SDraw::pos() const {
  return pos_;
}
inline void SDraw::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// SOtherDraw

// optional uint32 cmd = 1 [default = 32782];
inline bool SOtherDraw::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SOtherDraw::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SOtherDraw::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SOtherDraw::clear_cmd() {
  cmd_ = 32782u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SOtherDraw::cmd() const {
  return cmd_;
}
inline void SOtherDraw::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool SOtherDraw::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SOtherDraw::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SOtherDraw::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SOtherDraw::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 SOtherDraw::card() const {
  return card_;
}
inline void SOtherDraw::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional uint32 pos = 3;
inline bool SOtherDraw::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SOtherDraw::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SOtherDraw::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SOtherDraw::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SOtherDraw::pos() const {
  return pos_;
}
inline void SOtherDraw::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 4;
inline bool SOtherDraw::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SOtherDraw::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SOtherDraw::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SOtherDraw::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SOtherDraw::uid() const {
  return *uid_;
}
inline void SOtherDraw::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SOtherDraw::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SOtherDraw::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SOtherDraw::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SOtherDraw::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SOtherDraw::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CChi

// optional uint32 cmd = 1 [default = 32784];
inline bool CChi::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CChi::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CChi::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CChi::clear_cmd() {
  cmd_ = 32784u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CChi::cmd() const {
  return cmd_;
}
inline void CChi::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional bytes card = 2;
inline bool CChi::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CChi::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CChi::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CChi::clear_card() {
  if (card_ != &::google::protobuf::internal::kEmptyString) {
    card_->clear();
  }
  clear_has_card();
}
inline const ::std::string& CChi::card() const {
  return *card_;
}
inline void CChi::set_card(const ::std::string& value) {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  card_->assign(value);
}
inline void CChi::set_card(const char* value) {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  card_->assign(value);
}
inline void CChi::set_card(const void* value, size_t size) {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  card_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CChi::mutable_card() {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  return card_;
}
inline ::std::string* CChi::release_card() {
  clear_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_;
    card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CChi::set_allocated_card(::std::string* card) {
  if (card_ != &::google::protobuf::internal::kEmptyString) {
    delete card_;
  }
  if (card) {
    set_has_card();
    card_ = card;
  } else {
    clear_has_card();
    card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uid = 3;
inline bool CChi::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CChi::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CChi::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CChi::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CChi::uid() const {
  return *uid_;
}
inline void CChi::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CChi::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CChi::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CChi::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CChi::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CChi::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SChi

// optional uint32 cmd = 1 [default = 32784];
inline bool SChi::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SChi::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SChi::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SChi::clear_cmd() {
  cmd_ = 32784u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SChi::cmd() const {
  return cmd_;
}
inline void SChi::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional bytes card = 2;
inline bool SChi::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SChi::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SChi::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SChi::clear_card() {
  if (card_ != &::google::protobuf::internal::kEmptyString) {
    card_->clear();
  }
  clear_has_card();
}
inline const ::std::string& SChi::card() const {
  return *card_;
}
inline void SChi::set_card(const ::std::string& value) {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  card_->assign(value);
}
inline void SChi::set_card(const char* value) {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  card_->assign(value);
}
inline void SChi::set_card(const void* value, size_t size) {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  card_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SChi::mutable_card() {
  set_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    card_ = new ::std::string;
  }
  return card_;
}
inline ::std::string* SChi::release_card() {
  clear_has_card();
  if (card_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_;
    card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SChi::set_allocated_card(::std::string* card) {
  if (card_ != &::google::protobuf::internal::kEmptyString) {
    delete card_;
  }
  if (card) {
    set_has_card();
    card_ = card;
  } else {
    clear_has_card();
    card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pos = 3;
inline bool SChi::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SChi::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SChi::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SChi::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SChi::pos() const {
  return pos_;
}
inline void SChi::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 4;
inline bool SChi::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SChi::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SChi::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SChi::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SChi::uid() const {
  return *uid_;
}
inline void SChi::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SChi::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SChi::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SChi::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SChi::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SChi::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 err = 5;
inline bool SChi::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SChi::set_has_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SChi::clear_has_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SChi::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 SChi::err() const {
  return err_;
}
inline void SChi::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// CPeng

// optional uint32 cmd = 1 [default = 32785];
inline bool CPeng::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPeng::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPeng::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPeng::clear_cmd() {
  cmd_ = 32785u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CPeng::cmd() const {
  return cmd_;
}
inline void CPeng::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool CPeng::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPeng::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPeng::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPeng::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 CPeng::card() const {
  return card_;
}
inline void CPeng::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional string uid = 3;
inline bool CPeng::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPeng::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPeng::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPeng::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CPeng::uid() const {
  return *uid_;
}
inline void CPeng::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CPeng::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CPeng::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPeng::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CPeng::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CPeng::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SPeng

// optional uint32 cmd = 1 [default = 32785];
inline bool SPeng::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPeng::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPeng::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPeng::clear_cmd() {
  cmd_ = 32785u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SPeng::cmd() const {
  return cmd_;
}
inline void SPeng::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool SPeng::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPeng::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPeng::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPeng::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 SPeng::card() const {
  return card_;
}
inline void SPeng::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional uint32 pos = 3;
inline bool SPeng::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPeng::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPeng::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPeng::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SPeng::pos() const {
  return pos_;
}
inline void SPeng::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 4;
inline bool SPeng::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SPeng::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SPeng::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SPeng::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SPeng::uid() const {
  return *uid_;
}
inline void SPeng::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SPeng::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SPeng::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SPeng::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SPeng::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SPeng::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 err = 5;
inline bool SPeng::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SPeng::set_has_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SPeng::clear_has_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SPeng::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 SPeng::err() const {
  return err_;
}
inline void SPeng::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// CMingGang

// optional uint32 cmd = 1 [default = 32786];
inline bool CMingGang::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMingGang::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMingGang::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMingGang::clear_cmd() {
  cmd_ = 32786u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CMingGang::cmd() const {
  return cmd_;
}
inline void CMingGang::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool CMingGang::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMingGang::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMingGang::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMingGang::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 CMingGang::card() const {
  return card_;
}
inline void CMingGang::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional uint32 type = 3;
inline bool CMingGang::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMingGang::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMingGang::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMingGang::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMingGang::type() const {
  return type_;
}
inline void CMingGang::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string uid = 4;
inline bool CMingGang::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMingGang::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMingGang::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMingGang::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CMingGang::uid() const {
  return *uid_;
}
inline void CMingGang::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CMingGang::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CMingGang::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMingGang::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CMingGang::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMingGang::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SMingGang

// optional uint32 cmd = 1 [default = 32786];
inline bool SMingGang::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMingGang::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMingGang::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMingGang::clear_cmd() {
  cmd_ = 32786u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SMingGang::cmd() const {
  return cmd_;
}
inline void SMingGang::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool SMingGang::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMingGang::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMingGang::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMingGang::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 SMingGang::card() const {
  return card_;
}
inline void SMingGang::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional uint32 pos = 3;
inline bool SMingGang::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMingGang::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMingGang::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMingGang::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SMingGang::pos() const {
  return pos_;
}
inline void SMingGang::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 4;
inline bool SMingGang::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMingGang::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMingGang::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMingGang::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SMingGang::uid() const {
  return *uid_;
}
inline void SMingGang::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SMingGang::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SMingGang::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SMingGang::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SMingGang::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SMingGang::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 type = 5;
inline bool SMingGang::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMingGang::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMingGang::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMingGang::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SMingGang::type() const {
  return type_;
}
inline void SMingGang::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 hu = 6;
inline bool SMingGang::has_hu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SMingGang::set_has_hu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SMingGang::clear_has_hu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SMingGang::clear_hu() {
  hu_ = 0u;
  clear_has_hu();
}
inline ::google::protobuf::uint32 SMingGang::hu() const {
  return hu_;
}
inline void SMingGang::set_hu(::google::protobuf::uint32 value) {
  set_has_hu();
  hu_ = value;
}

// optional uint32 err = 7;
inline bool SMingGang::has_err() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SMingGang::set_has_err() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SMingGang::clear_has_err() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SMingGang::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 SMingGang::err() const {
  return err_;
}
inline void SMingGang::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// CAnGang

// optional uint32 cmd = 1 [default = 32787];
inline bool CAnGang::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAnGang::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAnGang::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAnGang::clear_cmd() {
  cmd_ = 32787u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CAnGang::cmd() const {
  return cmd_;
}
inline void CAnGang::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool CAnGang::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAnGang::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAnGang::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAnGang::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 CAnGang::card() const {
  return card_;
}
inline void CAnGang::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional uint32 type = 3;
inline bool CAnGang::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAnGang::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAnGang::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAnGang::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CAnGang::type() const {
  return type_;
}
inline void CAnGang::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string uid = 4;
inline bool CAnGang::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAnGang::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAnGang::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAnGang::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CAnGang::uid() const {
  return *uid_;
}
inline void CAnGang::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CAnGang::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CAnGang::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CAnGang::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CAnGang::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CAnGang::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SAnGang

// optional uint32 cmd = 1 [default = 32787];
inline bool SAnGang::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SAnGang::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SAnGang::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SAnGang::clear_cmd() {
  cmd_ = 32787u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SAnGang::cmd() const {
  return cmd_;
}
inline void SAnGang::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 card = 2;
inline bool SAnGang::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SAnGang::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SAnGang::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SAnGang::clear_card() {
  card_ = 0u;
  clear_has_card();
}
inline ::google::protobuf::uint32 SAnGang::card() const {
  return card_;
}
inline void SAnGang::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional uint32 pos = 3;
inline bool SAnGang::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SAnGang::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SAnGang::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SAnGang::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SAnGang::pos() const {
  return pos_;
}
inline void SAnGang::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 4;
inline bool SAnGang::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SAnGang::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SAnGang::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SAnGang::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SAnGang::uid() const {
  return *uid_;
}
inline void SAnGang::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SAnGang::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SAnGang::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SAnGang::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SAnGang::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SAnGang::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 type = 5;
inline bool SAnGang::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SAnGang::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SAnGang::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SAnGang::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SAnGang::type() const {
  return type_;
}
inline void SAnGang::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 err = 6;
inline bool SAnGang::has_err() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SAnGang::set_has_err() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SAnGang::clear_has_err() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SAnGang::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 SAnGang::err() const {
  return err_;
}
inline void SAnGang::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// SFa

// optional uint32 cmd = 1 [default = 32788];
inline bool SFa::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFa::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SFa::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SFa::clear_cmd() {
  cmd_ = 32788u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SFa::cmd() const {
  return cmd_;
}
inline void SFa::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 pos = 2;
inline bool SFa::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SFa::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SFa::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SFa::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SFa::pos() const {
  return pos_;
}
inline void SFa::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 3;
inline bool SFa::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SFa::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SFa::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SFa::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SFa::uid() const {
  return *uid_;
}
inline void SFa::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SFa::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SFa::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SFa::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SFa::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SFa::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CHu

// optional uint32 cmd = 1 [default = 32789];
inline bool CHu::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CHu::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CHu::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CHu::clear_cmd() {
  cmd_ = 32789u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 CHu::cmd() const {
  return cmd_;
}
inline void CHu::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional string uid = 2;
inline bool CHu::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CHu::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CHu::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CHu::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CHu::uid() const {
  return *uid_;
}
inline void CHu::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CHu::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CHu::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CHu::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CHu::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CHu::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SHu

// optional uint32 cmd = 1 [default = 32789];
inline bool SHu::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SHu::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SHu::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SHu::clear_cmd() {
  cmd_ = 32789u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SHu::cmd() const {
  return cmd_;
}
inline void SHu::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 pos = 2;
inline bool SHu::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SHu::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SHu::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SHu::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SHu::pos() const {
  return pos_;
}
inline void SHu::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 3;
inline bool SHu::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SHu::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SHu::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SHu::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SHu::uid() const {
  return *uid_;
}
inline void SHu::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SHu::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SHu::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHu::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SHu::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SHu::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 hu = 4;
inline bool SHu::has_hu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SHu::set_has_hu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SHu::clear_has_hu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SHu::clear_hu() {
  hu_ = 0u;
  clear_has_hu();
}
inline ::google::protobuf::uint32 SHu::hu() const {
  return hu_;
}
inline void SHu::set_hu(::google::protobuf::uint32 value) {
  set_has_hu();
  hu_ = value;
}

// optional uint32 err = 5;
inline bool SHu::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SHu::set_has_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SHu::clear_has_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SHu::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 SHu::err() const {
  return err_;
}
inline void SHu::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
}

// -------------------------------------------------------------------

// SGameover

// optional uint32 cmd = 1 [default = 32790];
inline bool SGameover::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGameover::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGameover::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGameover::clear_cmd() {
  cmd_ = 32790u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SGameover::cmd() const {
  return cmd_;
}
inline void SGameover::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 hu = 2;
inline bool SGameover::has_hu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGameover::set_has_hu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGameover::clear_has_hu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGameover::clear_hu() {
  hu_ = 0u;
  clear_has_hu();
}
inline ::google::protobuf::uint32 SGameover::hu() const {
  return hu_;
}
inline void SGameover::set_hu(::google::protobuf::uint32 value) {
  set_has_hu();
  hu_ = value;
}

// optional string huuid = 3;
inline bool SGameover::has_huuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGameover::set_has_huuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGameover::clear_has_huuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGameover::clear_huuid() {
  if (huuid_ != &::google::protobuf::internal::kEmptyString) {
    huuid_->clear();
  }
  clear_has_huuid();
}
inline const ::std::string& SGameover::huuid() const {
  return *huuid_;
}
inline void SGameover::set_huuid(const ::std::string& value) {
  set_has_huuid();
  if (huuid_ == &::google::protobuf::internal::kEmptyString) {
    huuid_ = new ::std::string;
  }
  huuid_->assign(value);
}
inline void SGameover::set_huuid(const char* value) {
  set_has_huuid();
  if (huuid_ == &::google::protobuf::internal::kEmptyString) {
    huuid_ = new ::std::string;
  }
  huuid_->assign(value);
}
inline void SGameover::set_huuid(const char* value, size_t size) {
  set_has_huuid();
  if (huuid_ == &::google::protobuf::internal::kEmptyString) {
    huuid_ = new ::std::string;
  }
  huuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SGameover::mutable_huuid() {
  set_has_huuid();
  if (huuid_ == &::google::protobuf::internal::kEmptyString) {
    huuid_ = new ::std::string;
  }
  return huuid_;
}
inline ::std::string* SGameover::release_huuid() {
  clear_has_huuid();
  if (huuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = huuid_;
    huuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SGameover::set_allocated_huuid(::std::string* huuid) {
  if (huuid_ != &::google::protobuf::internal::kEmptyString) {
    delete huuid_;
  }
  if (huuid) {
    set_has_huuid();
    huuid_ = huuid;
  } else {
    clear_has_huuid();
    huuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string beiuid = 4;
inline bool SGameover::has_beiuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGameover::set_has_beiuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGameover::clear_has_beiuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGameover::clear_beiuid() {
  if (beiuid_ != &::google::protobuf::internal::kEmptyString) {
    beiuid_->clear();
  }
  clear_has_beiuid();
}
inline const ::std::string& SGameover::beiuid() const {
  return *beiuid_;
}
inline void SGameover::set_beiuid(const ::std::string& value) {
  set_has_beiuid();
  if (beiuid_ == &::google::protobuf::internal::kEmptyString) {
    beiuid_ = new ::std::string;
  }
  beiuid_->assign(value);
}
inline void SGameover::set_beiuid(const char* value) {
  set_has_beiuid();
  if (beiuid_ == &::google::protobuf::internal::kEmptyString) {
    beiuid_ = new ::std::string;
  }
  beiuid_->assign(value);
}
inline void SGameover::set_beiuid(const char* value, size_t size) {
  set_has_beiuid();
  if (beiuid_ == &::google::protobuf::internal::kEmptyString) {
    beiuid_ = new ::std::string;
  }
  beiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SGameover::mutable_beiuid() {
  set_has_beiuid();
  if (beiuid_ == &::google::protobuf::internal::kEmptyString) {
    beiuid_ = new ::std::string;
  }
  return beiuid_;
}
inline ::std::string* SGameover::release_beiuid() {
  clear_has_beiuid();
  if (beiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beiuid_;
    beiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SGameover::set_allocated_beiuid(::std::string* beiuid) {
  if (beiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete beiuid_;
  }
  if (beiuid) {
    set_has_beiuid();
    beiuid_ = beiuid;
  } else {
    clear_has_beiuid();
    beiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pao = 5;
inline bool SGameover::has_pao() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGameover::set_has_pao() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGameover::clear_has_pao() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGameover::clear_pao() {
  pao_ = 0u;
  clear_has_pao();
}
inline ::google::protobuf::uint32 SGameover::pao() const {
  return pao_;
}
inline void SGameover::set_pao(::google::protobuf::uint32 value) {
  set_has_pao();
  pao_ = value;
}

// optional uint32 score = 6;
inline bool SGameover::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SGameover::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SGameover::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SGameover::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 SGameover::score() const {
  return score_;
}
inline void SGameover::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// repeated .protocol.UserOver info = 7;
inline int SGameover::info_size() const {
  return info_.size();
}
inline void SGameover::clear_info() {
  info_.Clear();
}
inline const ::protocol::UserOver& SGameover::info(int index) const {
  return info_.Get(index);
}
inline ::protocol::UserOver* SGameover::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::protocol::UserOver* SGameover::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::UserOver >&
SGameover::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::UserOver >*
SGameover::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// SRoundOver

// optional uint32 cmd = 1 [default = 32791];
inline bool SRoundOver::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SRoundOver::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SRoundOver::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SRoundOver::clear_cmd() {
  cmd_ = 32791u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SRoundOver::cmd() const {
  return cmd_;
}
inline void SRoundOver::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 round = 2;
inline bool SRoundOver::has_round() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SRoundOver::set_has_round() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SRoundOver::clear_has_round() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SRoundOver::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 SRoundOver::round() const {
  return round_;
}
inline void SRoundOver::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
}

// optional uint32 ante = 3;
inline bool SRoundOver::has_ante() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SRoundOver::set_has_ante() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SRoundOver::clear_has_ante() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SRoundOver::clear_ante() {
  ante_ = 0u;
  clear_has_ante();
}
inline ::google::protobuf::uint32 SRoundOver::ante() const {
  return ante_;
}
inline void SRoundOver::set_ante(::google::protobuf::uint32 value) {
  set_has_ante();
  ante_ = value;
}

// optional string uid = 4;
inline bool SRoundOver::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SRoundOver::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SRoundOver::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SRoundOver::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SRoundOver::uid() const {
  return *uid_;
}
inline void SRoundOver::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SRoundOver::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SRoundOver::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRoundOver::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SRoundOver::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRoundOver::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string time = 5;
inline bool SRoundOver::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SRoundOver::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SRoundOver::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SRoundOver::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& SRoundOver::time() const {
  return *time_;
}
inline void SRoundOver::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void SRoundOver::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void SRoundOver::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRoundOver::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* SRoundOver::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRoundOver::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protocol.UserRound info = 6;
inline int SRoundOver::info_size() const {
  return info_.size();
}
inline void SRoundOver::clear_info() {
  info_.Clear();
}
inline const ::protocol::UserRound& SRoundOver::info(int index) const {
  return info_.Get(index);
}
inline ::protocol::UserRound* SRoundOver::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::protocol::UserRound* SRoundOver::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::UserRound >&
SRoundOver::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::UserRound >*
SRoundOver::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// SDissolveTip

// optional uint32 cmd = 1 [default = 32792];
inline bool SDissolveTip::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SDissolveTip::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SDissolveTip::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SDissolveTip::clear_cmd() {
  cmd_ = 32792u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 SDissolveTip::cmd() const {
  return cmd_;
}
inline void SDissolveTip::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 time = 2;
inline bool SDissolveTip::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SDissolveTip::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SDissolveTip::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SDissolveTip::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 SDissolveTip::time() const {
  return time_;
}
inline void SDissolveTip::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 pos = 3;
inline bool SDissolveTip::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SDissolveTip::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SDissolveTip::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SDissolveTip::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 SDissolveTip::pos() const {
  return pos_;
}
inline void SDissolveTip::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional string uid = 4;
inline bool SDissolveTip::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SDissolveTip::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SDissolveTip::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SDissolveTip::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SDissolveTip::uid() const {
  return *uid_;
}
inline void SDissolveTip::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SDissolveTip::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SDissolveTip::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SDissolveTip::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SDissolveTip::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SDissolveTip::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoomLogic_2eproto__INCLUDED
